%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Sparky.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Graphics
%%CreationDate: 10/28/10
%%BoundingBox: 0 0 656 488
%%HiResBoundingBox: 0 0 655.7554 487.2315
%%CropBox: 0 0 655.7554 487.2315
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: (PANTONE 123 C)
%%+ (PANTONE 208 C)
%%CMYKCustomColor: 0 0.2400 0.9400 0 (PANTONE 123 C)
%%+ 0 1 0.3600 0.3700 (PANTONE 208 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:F77F1174072068119109F7E732F6EB22</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F77F1174072068119109F7E732F6EB22</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F77F11740720681191098B0AB027D332</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:15ceaec0-f82f-9046-bccc-4cf0fae8ce3f</stRef:instanceID>
            <stRef:documentID>xmp.did:F77F11740720681191098B0AB027D332</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:F77F11740720681191098B0AB027D332</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681191098B0AB027D332</stEvt:instanceID>
                  <stEvt:when>2010-07-13T10:15:31-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068119109F7E732F6EB22</stEvt:instanceID>
                  <stEvt:when>2010-10-28T10:16:10-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Sparky</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-10-28T10:16:10-06:00</xmp:CreateDate>
         <xmp:MetadataDate>2010-10-28T10:16:10-06:00</xmp:MetadataDate>
         <xmp:ModifyDate>2010-10-28T10:16:10-06:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYqxzzr5+&#xA;8v8AlC2tpNUlJub6UQWNnHvLK5YKaDoFXkCzH9dBi5Wl0k8xPDyHMsjxcVKvNtha3/lfV7K7ANtP&#xA;ZzpJypQAxn4t+hXqD2wFu08zHJEjnYfIX5ffnb5z8oXMcf1l9T0cECXTbpy6hf8AilzVoz8vh8Qc&#xA;mYvZ6zsvFmHLhl3h9f8AlnzHpfmTQ7PWtLk9SyvEDxk7Mp6MjDsysCDkXi8+GWKZhLmEzxanYq7F&#xA;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&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>True</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>11.000000</stDim:w>
            <stDim:h>8.500000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 208 C</rdf:li>
               <rdf:li>PANTONE 123 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 208 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>36.000000</xmpG:yellow>
                           <xmpG:black>37.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 123 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>24.000000</xmpG:magenta>
                           <xmpG:yellow>94.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.003099</xmpG:magenta>
                           <xmpG:yellow>0.003099</xmpG:yellow>
                           <xmpG:black>0.003099</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.003099</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.003099</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=64 M=26 Y=27 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>64.000000</xmpG:cyan>
                           <xmpG:magenta>26.000000</xmpG:magenta>
                           <xmpG:yellow>26.999998</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.003099</xmpG:magenta>
                           <xmpG:yellow>0.003099</xmpG:yellow>
                           <xmpG:black>0.003099</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -487.231 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 487.231 li
655.755 487.231 li
655.755 0 li
cp
clp
[1 0 0 1 0 0 ]ct
354.885 113.724 mo
370.134 52.4424 li
385.462 113.724 li
354.885 113.724 li
cp
647.996 167.205 mo
647.996 167.205 645.538 164.476 641.455 160.106 cv
636.389 154.68 636.677 148.938 636.677 148.938 cv
636.677 124.898 li
636.677 19.1807 li
587.362 19.1807 li
587.362 122.95 li
586.747 132.782 577.121 135.291 571.775 135.118 cv
564.128 134.882 559.699 130.602 559.699 123.257 cv
559.693 19.2266 li
511.663 19.2266 li
511.654 19.1807 li
500.425 19.1807 491.609 19.2266 477.809 19.2266 cv
451.535 19.2266 426.716 23.2427 418.352 45.0396 cv
413.39 25.7144 li
412.175 21.9214 408.025 19.1846 403.929 19.1846 cv
397.479 19.1846 li
333.225 19.1885 li
328.456 19.1885 li
318.042 19.1885 li
316.811 19.1885 316.366 19.5776 317.012 20.4521 cv
317.012 20.4521 319.334 22.6865 323.555 27.4912 cv
329.421 34.1733 327.121 43.1172 327.121 43.1172 cv
295.697 168.468 li
341.448 168.468 li
348.046 140.922 li
392.208 140.922 li
399.095 168.468 li
446.108 168.468 li
450.719 168.468 455.414 168.468 459.358 168.468 cv
484.081 168.468 504.188 165.951 514.139 150.553 cv
521.551 164.585 537.512 171.186 565.663 168.762 cv
575.467 167.916 585.101 163.334 589.237 156.069 cv
591.131 162.104 li
592.786 165.75 596.131 168.447 600.909 168.447 cv
623.132 168.447 li
626.974 168.447 li
646.969 168.447 li
648.2 168.447 648.644 168.08 647.996 167.205 cv
cp
false sop
/0 
<<
/Name (PANTONE 208 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 1 .36 .37 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
407.679 46.9263 mo
407.669 46.9399 li
407.58 47.0337 li
407.55 47.0654 li
407.58 47.0874 li
407.677 47.1816 li
416.122 55.0171 li
416.31 55.189 li
416.361 55.2344 li
416.374 55.165 li
416.409 54.917 li
416.583 53.604 416.813 52.2861 417.101 50.9966 cv
417.124 50.9092 li
417.129 50.877 li
417.101 50.8667 li
417.017 50.8164 li
408.854 45.874 li
408.756 45.8179 li
408.733 45.8022 li
408.712 45.8262 li
408.64 45.9102 li
408.633 45.9175 li
408.562 45.9917 li
408.663 45.9814 li
408.837 45.9697 li
408.932 45.9497 li
408.854 45.8936 li
408.493 45.6221 407.921 45.6787 407.608 46.0137 cv
407.451 46.1753 407.372 46.4028 407.391 46.6245 cv
407.41 46.8477 407.521 47.0479 407.703 47.1816 cv
407.773 47.2314 li
407.76 47.1436 li
407.749 46.9541 li
407.743 46.8682 li
407.679 46.9263 li
cp
/1 
<<
/Name (PANTONE 123 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 .24 .94 0 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
.258475 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
407.679 46.9263 mo
407.669 46.9399 li
407.58 47.0337 li
407.55 47.0654 li
407.58 47.0874 li
407.677 47.1816 li
416.122 55.0171 li
416.31 55.189 li
416.361 55.2344 li
416.374 55.165 li
416.409 54.917 li
416.583 53.604 416.813 52.2861 417.101 50.9966 cv
417.124 50.9092 li
417.129 50.877 li
417.101 50.8667 li
417.017 50.8164 li
408.854 45.874 li
408.756 45.8179 li
408.733 45.8022 li
408.712 45.8262 li
408.64 45.9102 li
408.633 45.9175 li
408.562 45.9917 li
408.663 45.9814 li
408.837 45.9697 li
408.932 45.9497 li
408.854 45.8936 li
408.493 45.6221 407.921 45.6787 407.608 46.0137 cv
407.451 46.1753 407.372 46.4028 407.391 46.6245 cv
407.41 46.8477 407.521 47.0479 407.703 47.1816 cv
407.773 47.2314 li
407.76 47.1436 li
407.749 46.9541 li
407.743 46.8682 li
407.679 46.9263 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
399.495 57.6089 mo
399.483 57.6167 li
399.412 57.7324 li
399.387 57.7603 li
399.42 57.7881 li
399.535 57.8516 li
415.899 68.5049 li
416.122 68.6523 li
416.198 68.6987 li
416.182 68.6143 li
416.154 68.3491 li
415.975 66.6377 415.881 64.8633 415.881 63.0664 cv
415.881 62.9985 415.881 62.9248 415.881 62.8511 cv
415.881 62.6675 li
415.881 62.5757 li
415.81 62.5757 li
415.824 62.5415 li
415.858 62.5371 li
415.852 62.5371 415.818 62.5195 415.783 62.5039 cv
400.446 56.3828 li
400.339 56.3408 li
400.311 56.3267 li
400.295 56.3545 li
400.237 56.4502 li
400.233 56.4644 li
400.179 56.5469 li
400.272 56.5181 li
400.446 56.4707 li
400.537 56.4468 li
400.451 56.3989 li
400.041 56.1895 399.485 56.335 399.242 56.7139 cv
399.125 56.8979 399.083 57.1294 399.143 57.3413 cv
399.205 57.5605 399.348 57.7363 399.558 57.8516 cv
399.633 57.8877 li
399.605 57.8042 li
399.564 57.6167 li
399.541 57.5342 li
399.495 57.6089 li
cp
false sop
1 /1 /CSD get_res sepcs
1 sep
f
399.495 57.6089 mo
399.483 57.6167 li
399.412 57.7324 li
399.387 57.7603 li
399.42 57.7881 li
399.535 57.8516 li
415.899 68.5049 li
416.122 68.6523 li
416.198 68.6987 li
416.182 68.6143 li
416.154 68.3491 li
415.975 66.6377 415.881 64.8633 415.881 63.0664 cv
415.881 62.9985 415.881 62.9248 415.881 62.8511 cv
415.881 62.6675 li
415.881 62.5757 li
415.81 62.5757 li
415.824 62.5415 li
415.858 62.5371 li
415.852 62.5371 415.818 62.5195 415.783 62.5039 cv
400.446 56.3828 li
400.339 56.3408 li
400.311 56.3267 li
400.295 56.3545 li
400.237 56.4502 li
400.233 56.4644 li
400.179 56.5469 li
400.272 56.5181 li
400.446 56.4707 li
400.537 56.4468 li
400.451 56.3989 li
400.041 56.1895 399.485 56.335 399.242 56.7139 cv
399.125 56.8979 399.083 57.1294 399.143 57.3413 cv
399.205 57.5605 399.348 57.7363 399.558 57.8516 cv
399.633 57.8877 li
399.605 57.8042 li
399.564 57.6167 li
399.541 57.5342 li
399.495 57.6089 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
393.499 69.3931 mo
393.492 69.4111 li
393.433 69.5269 li
393.419 69.5586 li
393.457 69.583 li
393.575 69.6348 li
419.286 80.8618 li
419.606 81.002 li
419.699 81.0459 li
419.655 80.9463 li
419.506 80.6367 li
418.417 78.3364 417.558 75.8491 416.959 73.228 cv
416.941 73.1484 li
416.939 73.1265 li
416.914 73.1206 li
416.834 73.1021 li
394.201 68.0293 li
394.09 68.0156 li
394.053 68.0015 li
394.042 68.0293 li
394.004 68.1455 li
394.002 68.1592 li
393.969 68.251 li
394.053 68.2051 li
394.213 68.1274 li
394.304 68.0894 li
394.213 68.0532 li
393.764 67.9141 393.25 68.1455 393.074 68.5547 cv
392.995 68.7622 393.001 68.98 393.094 69.1836 cv
393.193 69.3833 393.372 69.5469 393.598 69.6206 cv
393.679 69.6523 li
393.645 69.5688 li
393.568 69.3931 li
393.534 69.3154 li
393.499 69.3931 li
cp
false sop
1 /1 /CSD get_res sepcs
1 sep
f
393.499 69.3931 mo
393.492 69.4111 li
393.433 69.5269 li
393.419 69.5586 li
393.457 69.583 li
393.575 69.6348 li
419.286 80.8618 li
419.606 81.002 li
419.699 81.0459 li
419.655 80.9463 li
419.506 80.6367 li
418.417 78.3364 417.558 75.8491 416.959 73.228 cv
416.941 73.1484 li
416.939 73.1265 li
416.914 73.1206 li
416.834 73.1021 li
394.201 68.0293 li
394.09 68.0156 li
394.053 68.0015 li
394.042 68.0293 li
394.004 68.1455 li
394.002 68.1592 li
393.969 68.251 li
394.053 68.2051 li
394.213 68.1274 li
394.304 68.0894 li
394.213 68.0532 li
393.764 67.9141 393.25 68.1455 393.074 68.5547 cv
392.995 68.7622 393.001 68.98 393.094 69.1836 cv
393.193 69.3833 393.372 69.5469 393.598 69.6206 cv
393.679 69.6523 li
393.645 69.5688 li
393.568 69.3931 li
393.534 69.3154 li
393.499 69.3931 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
484.611 126.575 mo
484.611 115.87 472.613 111.752 458.721 106.982 cv
444.412 102.067 428.198 96.5 420.446 82.4614 cv
420.41 82.4014 li
420.402 82.3877 li
420.378 82.3877 li
420.302 82.3794 li
390.313 80.4829 li
390.195 80.479 li
390.161 80.479 li
390.151 80.5107 li
390.137 80.6265 li
390.132 80.6401 li
390.114 80.7383 li
390.191 80.6787 li
390.342 80.5767 li
390.418 80.5229 li
390.326 80.5029 li
389.854 80.4351 389.385 80.7422 389.3 81.1816 cv
389.257 81.3872 389.3 81.605 389.431 81.7847 cv
389.566 81.9761 389.778 82.1064 390.012 82.144 cv
390.102 82.1621 li
390.049 82.084 li
389.947 81.9282 li
389.898 81.8525 li
389.879 81.9404 li
389.872 81.96 li
389.842 82.084 li
389.835 82.1118 li
389.872 82.1235 li
389.998 82.1563 li
420.142 89.8975 li
420.149 89.8975 li
420.156 89.8975 li
420.156 89.8975 li
420.173 89.8975 li
420.255 89.9014 420.332 89.9497 420.383 90.0098 cv
420.421 90.0537 420.446 90.1094 420.437 90.1689 cv
420.421 90.3032 420.282 90.4404 420.105 90.4229 cv
420.112 90.4229 420.098 90.4229 420.098 90.4229 cv
420.098 90.4229 li
420.091 90.4229 li
420.08 90.4229 li
388.891 93.3535 li
388.77 93.3633 li
388.733 93.3672 li
388.735 93.4033 li
388.739 93.5234 li
388.739 93.5469 li
388.739 93.6309 li
388.802 93.5649 li
388.931 93.4409 li
389.001 93.3711 li
388.912 93.3711 li
388.429 93.3711 388.024 93.7466 388.024 94.2017 cv
388.024 94.4136 388.112 94.6133 388.264 94.7729 cv
388.436 94.9385 388.667 95.0303 388.912 95.0303 cv
389.001 95.0303 li
388.931 94.96 li
388.802 94.8364 li
388.739 94.7729 li
388.739 94.8569 li
388.739 94.8789 li
388.735 94.9985 li
388.733 95.0303 li
388.77 95.04 li
388.891 95.0444 li
420.039 97.9751 li
420.051 97.9751 li
420.051 97.979 li
420.051 97.9751 li
420.068 97.9751 li
420.233 97.9609 420.378 98.0664 420.393 98.2007 cv
420.396 98.2744 420.372 98.3584 420.321 98.4185 cv
420.273 98.4741 420.208 98.5059 420.142 98.5098 cv
420.129 98.5142 li
420.129 98.5142 li
420.125 98.5142 li
420.112 98.5142 li
389.991 106.246 li
389.868 106.274 li
389.833 106.288 li
389.835 106.32 li
389.864 106.443 li
389.868 106.458 li
389.885 106.546 li
389.938 106.476 li
390.044 106.32 li
390.091 106.24 li
390.002 106.26 li
389.772 106.296 389.562 106.426 389.423 106.619 cv
389.294 106.799 389.252 107.015 389.294 107.222 cv
389.375 107.666 389.851 107.969 390.316 107.901 cv
390.407 107.881 li
390.33 107.825 li
390.184 107.719 li
390.112 107.666 li
390.124 107.761 li
390.124 107.775 li
390.143 107.887 li
390.151 107.923 li
390.184 107.923 li
390.302 107.919 li
421.523 105.953 li
421.537 105.953 li
421.542 105.953 li
421.542 105.953 li
421.555 105.948 li
421.718 105.904 421.887 105.989 421.927 106.126 cv
421.948 106.19 421.935 106.282 421.891 106.352 cv
421.86 106.416 421.798 106.458 421.735 106.476 cv
421.725 106.476 li
421.718 106.476 li
421.718 106.476 li
421.708 106.482 li
393.564 118.77 li
393.445 118.821 li
393.403 118.843 li
393.421 118.875 li
393.475 118.991 li
393.485 119.009 li
393.516 119.086 li
393.55 119.009 li
393.626 118.833 li
393.665 118.749 li
393.585 118.781 li
393.357 118.857 393.176 119.019 393.083 119.226 cv
392.983 119.428 392.976 119.639 393.064 119.847 cv
393.229 120.263 393.75 120.492 394.195 120.35 cv
394.286 120.322 li
394.201 120.274 li
394.037 120.203 li
393.956 120.156 li
393.981 120.247 li
393.991 120.263 li
394.031 120.374 li
394.042 120.4 li
394.072 120.39 li
394.183 120.374 li
424.537 113.57 li
424.546 113.57 li
424.546 113.57 li
424.555 113.57 li
424.564 113.566 li
424.71 113.507 424.931 113.583 425 113.724 cv
425.03 113.774 425.03 113.834 425.009 113.904 cv
424.982 113.982 424.919 114.042 424.846 114.074 cv
424.84 114.08 li
424.829 114.08 li
424.829 114.08 li
424.822 114.094 li
399.51 130.556 li
399.4 130.62 li
399.366 130.644 li
399.387 130.675 li
399.464 130.787 li
399.473 130.799 li
399.517 130.869 li
399.541 130.792 li
399.587 130.602 li
399.611 130.52 li
399.535 130.556 li
399.325 130.667 399.177 130.847 399.125 131.067 cv
399.063 131.274 399.102 131.506 399.218 131.694 cv
399.464 132.077 400.021 132.221 400.43 132.013 cv
400.516 131.961 li
400.418 131.934 li
400.249 131.887 li
400.161 131.855 li
400.207 131.943 li
400.214 131.953 li
400.272 132.053 li
400.29 132.077 li
400.32 132.073 li
400.425 132.025 li
428.967 120.622 li
428.979 120.622 li
428.986 120.618 li
428.989 120.612 li
428.997 120.608 li
429.131 120.524 429.331 120.552 429.423 120.672 cv
429.473 120.741 429.506 120.837 429.489 120.925 cv
429.476 120.969 429.459 121.025 429.4 121.065 cv
429.395 121.069 li
429.383 121.073 li
429.383 121.073 li
429.378 121.081 li
407.649 141.229 li
407.55 141.32 li
407.521 141.348 li
407.55 141.376 li
407.642 141.466 li
407.653 141.483 li
407.714 141.543 li
407.721 141.456 li
407.735 141.26 li
407.743 141.18 li
407.677 141.229 li
407.491 141.368 407.38 141.557 407.364 141.786 cv
407.345 142.006 407.421 142.227 407.58 142.398 cv
407.893 142.733 408.469 142.785 408.826 142.514 cv
408.903 142.458 li
408.812 142.444 li
408.633 142.426 li
408.537 142.42 li
408.601 142.49 li
408.612 142.504 li
408.679 142.585 li
408.703 142.61 li
408.733 142.596 li
408.821 142.54 li
434.729 126.86 li
434.741 126.854 li
434.743 126.854 li
434.745 126.854 li
434.758 126.842 li
434.875 126.741 435.075 126.741 435.191 126.842 cv
435.329 126.966 435.348 127.046 435.348 127.078 cv
435.348 127.086 435.348 127.132 435.255 127.22 cv
435.245 127.224 li
435.245 127.23 li
435.245 127.234 li
435.233 127.242 li
417.729 150.473 li
417.654 150.576 li
417.625 150.617 li
417.656 150.631 li
417.767 150.715 li
417.779 150.729 li
417.848 150.775 li
417.839 150.691 li
417.826 150.496 li
417.814 150.41 li
417.75 150.473 li
417.61 150.631 417.538 150.839 417.556 151.057 cv
417.571 151.282 417.691 151.498 417.883 151.639 cv
418.259 151.921 418.831 151.885 419.134 151.558 cv
419.202 151.484 li
419.104 151.494 li
418.928 151.501 li
418.831 151.51 li
418.906 151.571 li
418.927 151.585 li
419.002 151.649 li
419.032 151.669 li
419.052 151.649 li
419.134 151.581 li
441.6 132.126 li
441.609 132.117 li
441.609 132.113 li
441.614 132.108 li
441.621 132.101 li
441.713 131.975 441.914 131.943 442.044 132.031 cv
442.146 132.108 442.215 132.193 442.229 132.272 cv
442.234 132.325 442.217 132.376 442.185 132.42 cv
442.175 132.436 li
442.175 132.436 li
442.173 132.44 li
442.167 132.455 li
429.448 158.012 li
429.395 158.131 li
429.378 158.169 li
429.41 158.188 li
429.523 158.243 li
429.541 158.253 li
429.614 158.289 li
429.599 158.206 li
429.541 158.018 li
429.523 157.934 li
429.473 158.012 li
429.36 158.188 429.331 158.395 429.383 158.597 cv
429.439 158.824 429.602 159.022 429.82 159.133 cv
430.245 159.351 430.8 159.229 431.041 158.852 cv
431.086 158.769 li
430.999 158.8 li
430.83 158.836 li
430.729 158.864 li
430.818 158.908 li
430.834 158.92 li
430.929 158.976 li
430.955 158.99 li
430.975 158.96 li
431.045 158.884 li
443.937 142.956 li
443.979 142.91 li
443.921 142.889 li
443.693 142.845 li
443.631 142.83 li
443.65 142.889 li
443.654 142.927 li
443.715 143.176 li
443.74 143.251 li
443.787 143.19 li
443.945 142.987 li
449.652 135.946 li
449.722 135.854 li
449.615 135.882 li
449.454 135.914 li
449.342 135.946 li
449.451 135.99 li
453.198 137.725 456.88 138.844 459.817 139.124 cv
468.564 139.968 476.737 138.002 481.152 133.994 cv
483.448 131.905 484.611 129.408 484.611 126.575 cv
cp
false sop
1 /1 /CSD get_res sepcs
1 sep
f
484.611 126.575 mo
484.611 115.87 472.613 111.752 458.721 106.982 cv
444.412 102.067 428.198 96.5 420.446 82.4614 cv
420.41 82.4014 li
420.402 82.3877 li
420.378 82.3877 li
420.302 82.3794 li
390.313 80.4829 li
390.195 80.479 li
390.161 80.479 li
390.151 80.5107 li
390.137 80.6265 li
390.132 80.6401 li
390.114 80.7383 li
390.191 80.6787 li
390.342 80.5767 li
390.418 80.5229 li
390.326 80.5029 li
389.854 80.4351 389.385 80.7422 389.3 81.1816 cv
389.257 81.3872 389.3 81.605 389.431 81.7847 cv
389.566 81.9761 389.778 82.1064 390.012 82.144 cv
390.102 82.1621 li
390.049 82.084 li
389.947 81.9282 li
389.898 81.8525 li
389.879 81.9404 li
389.872 81.96 li
389.842 82.084 li
389.835 82.1118 li
389.872 82.1235 li
389.998 82.1563 li
420.142 89.8975 li
420.149 89.8975 li
420.156 89.8975 li
420.156 89.8975 li
420.173 89.8975 li
420.255 89.9014 420.332 89.9497 420.383 90.0098 cv
420.421 90.0537 420.446 90.1094 420.437 90.1689 cv
420.421 90.3032 420.282 90.4404 420.105 90.4229 cv
420.112 90.4229 420.098 90.4229 420.098 90.4229 cv
420.098 90.4229 li
420.091 90.4229 li
420.08 90.4229 li
388.891 93.3535 li
388.77 93.3633 li
388.733 93.3672 li
388.735 93.4033 li
388.739 93.5234 li
388.739 93.5469 li
388.739 93.6309 li
388.802 93.5649 li
388.931 93.4409 li
389.001 93.3711 li
388.912 93.3711 li
388.429 93.3711 388.024 93.7466 388.024 94.2017 cv
388.024 94.4136 388.112 94.6133 388.264 94.7729 cv
388.436 94.9385 388.667 95.0303 388.912 95.0303 cv
389.001 95.0303 li
388.931 94.96 li
388.802 94.8364 li
388.739 94.7729 li
388.739 94.8569 li
388.739 94.8789 li
388.735 94.9985 li
388.733 95.0303 li
388.77 95.04 li
388.891 95.0444 li
420.039 97.9751 li
420.051 97.9751 li
420.051 97.979 li
420.051 97.9751 li
420.068 97.9751 li
420.233 97.9609 420.378 98.0664 420.393 98.2007 cv
420.396 98.2744 420.372 98.3584 420.321 98.4185 cv
420.273 98.4741 420.208 98.5059 420.142 98.5098 cv
420.129 98.5142 li
420.129 98.5142 li
420.125 98.5142 li
420.112 98.5142 li
389.991 106.246 li
389.868 106.274 li
389.833 106.288 li
389.835 106.32 li
389.864 106.443 li
389.868 106.458 li
389.885 106.546 li
389.938 106.476 li
390.044 106.32 li
390.091 106.24 li
390.002 106.26 li
389.772 106.296 389.562 106.426 389.423 106.619 cv
389.294 106.799 389.252 107.015 389.294 107.222 cv
389.375 107.666 389.851 107.969 390.316 107.901 cv
390.407 107.881 li
390.33 107.825 li
390.184 107.719 li
390.112 107.666 li
390.124 107.761 li
390.124 107.775 li
390.143 107.887 li
390.151 107.923 li
390.184 107.923 li
390.302 107.919 li
421.523 105.953 li
421.537 105.953 li
421.542 105.953 li
421.542 105.953 li
421.555 105.948 li
421.718 105.904 421.887 105.989 421.927 106.126 cv
421.948 106.19 421.935 106.282 421.891 106.352 cv
421.86 106.416 421.798 106.458 421.735 106.476 cv
421.725 106.476 li
421.718 106.476 li
421.718 106.476 li
421.708 106.482 li
393.564 118.77 li
393.445 118.821 li
393.403 118.843 li
393.421 118.875 li
393.475 118.991 li
393.485 119.009 li
393.516 119.086 li
393.55 119.009 li
393.626 118.833 li
393.665 118.749 li
393.585 118.781 li
393.357 118.857 393.176 119.019 393.083 119.226 cv
392.983 119.428 392.976 119.639 393.064 119.847 cv
393.229 120.263 393.75 120.492 394.195 120.35 cv
394.286 120.322 li
394.201 120.274 li
394.037 120.203 li
393.956 120.156 li
393.981 120.247 li
393.991 120.263 li
394.031 120.374 li
394.042 120.4 li
394.072 120.39 li
394.183 120.374 li
424.537 113.57 li
424.546 113.57 li
424.546 113.57 li
424.555 113.57 li
424.564 113.566 li
424.71 113.507 424.931 113.583 425 113.724 cv
425.03 113.774 425.03 113.834 425.009 113.904 cv
424.982 113.982 424.919 114.042 424.846 114.074 cv
424.84 114.08 li
424.829 114.08 li
424.829 114.08 li
424.822 114.094 li
399.51 130.556 li
399.4 130.62 li
399.366 130.644 li
399.387 130.675 li
399.464 130.787 li
399.473 130.799 li
399.517 130.869 li
399.541 130.792 li
399.587 130.602 li
399.611 130.52 li
399.535 130.556 li
399.325 130.667 399.177 130.847 399.125 131.067 cv
399.063 131.274 399.102 131.506 399.218 131.694 cv
399.464 132.077 400.021 132.221 400.43 132.013 cv
400.516 131.961 li
400.418 131.934 li
400.249 131.887 li
400.161 131.855 li
400.207 131.943 li
400.214 131.953 li
400.272 132.053 li
400.29 132.077 li
400.32 132.073 li
400.425 132.025 li
428.967 120.622 li
428.979 120.622 li
428.986 120.618 li
428.989 120.612 li
428.997 120.608 li
429.131 120.524 429.331 120.552 429.423 120.672 cv
429.473 120.741 429.506 120.837 429.489 120.925 cv
429.476 120.969 429.459 121.025 429.4 121.065 cv
429.395 121.069 li
429.383 121.073 li
429.383 121.073 li
429.378 121.081 li
407.649 141.229 li
407.55 141.32 li
407.521 141.348 li
407.55 141.376 li
407.642 141.466 li
407.653 141.483 li
407.714 141.543 li
407.721 141.456 li
407.735 141.26 li
407.743 141.18 li
407.677 141.229 li
407.491 141.368 407.38 141.557 407.364 141.786 cv
407.345 142.006 407.421 142.227 407.58 142.398 cv
407.893 142.733 408.469 142.785 408.826 142.514 cv
408.903 142.458 li
408.812 142.444 li
408.633 142.426 li
408.537 142.42 li
408.601 142.49 li
408.612 142.504 li
408.679 142.585 li
408.703 142.61 li
408.733 142.596 li
408.821 142.54 li
434.729 126.86 li
434.741 126.854 li
434.743 126.854 li
434.745 126.854 li
434.758 126.842 li
434.875 126.741 435.075 126.741 435.191 126.842 cv
435.329 126.966 435.348 127.046 435.348 127.078 cv
435.348 127.086 435.348 127.132 435.255 127.22 cv
435.245 127.224 li
435.245 127.23 li
435.245 127.234 li
435.233 127.242 li
417.729 150.473 li
417.654 150.576 li
417.625 150.617 li
417.656 150.631 li
417.767 150.715 li
417.779 150.729 li
417.848 150.775 li
417.839 150.691 li
417.826 150.496 li
417.814 150.41 li
417.75 150.473 li
417.61 150.631 417.538 150.839 417.556 151.057 cv
417.571 151.282 417.691 151.498 417.883 151.639 cv
418.259 151.921 418.831 151.885 419.134 151.558 cv
419.202 151.484 li
419.104 151.494 li
418.928 151.501 li
418.831 151.51 li
418.906 151.571 li
418.927 151.585 li
419.002 151.649 li
419.032 151.669 li
419.052 151.649 li
419.134 151.581 li
441.6 132.126 li
441.609 132.117 li
441.609 132.113 li
441.614 132.108 li
441.621 132.101 li
441.713 131.975 441.914 131.943 442.044 132.031 cv
442.146 132.108 442.215 132.193 442.229 132.272 cv
442.234 132.325 442.217 132.376 442.185 132.42 cv
442.175 132.436 li
442.175 132.436 li
442.173 132.44 li
442.167 132.455 li
429.448 158.012 li
429.395 158.131 li
429.378 158.169 li
429.41 158.188 li
429.523 158.243 li
429.541 158.253 li
429.614 158.289 li
429.599 158.206 li
429.541 158.018 li
429.523 157.934 li
429.473 158.012 li
429.36 158.188 429.331 158.395 429.383 158.597 cv
429.439 158.824 429.602 159.022 429.82 159.133 cv
430.245 159.351 430.8 159.229 431.041 158.852 cv
431.086 158.769 li
430.999 158.8 li
430.83 158.836 li
430.729 158.864 li
430.818 158.908 li
430.834 158.92 li
430.929 158.976 li
430.955 158.99 li
430.975 158.96 li
431.045 158.884 li
443.937 142.956 li
443.979 142.91 li
443.921 142.889 li
443.693 142.845 li
443.631 142.83 li
443.65 142.889 li
443.654 142.927 li
443.715 143.176 li
443.74 143.251 li
443.787 143.19 li
443.945 142.987 li
449.652 135.946 li
449.722 135.854 li
449.615 135.882 li
449.454 135.914 li
449.342 135.946 li
449.451 135.99 li
453.198 137.725 456.88 138.844 459.817 139.124 cv
468.564 139.968 476.737 138.002 481.152 133.994 cv
483.448 131.905 484.611 129.408 484.611 126.575 cv
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
525.468 150.751 mo
525.486 150.743 li
525.597 150.663 li
525.626 150.647 li
525.604 150.611 li
525.527 150.508 li
518.753 141.512 li
518.606 141.316 li
518.559 141.256 li
518.53 141.324 li
518.457 141.557 li
518.043 142.867 517.576 144.131 517.057 145.333 cv
517.02 145.425 li
517.005 145.448 li
517.028 145.47 li
517.105 145.53 li
524.117 151.603 li
524.195 151.671 li
524.221 151.693 li
524.246 151.677 li
524.33 151.613 li
524.343 151.603 li
524.427 151.54 li
524.321 151.534 li
524.145 151.521 li
524.045 151.501 li
524.117 151.585 li
524.427 151.903 524.994 151.949 525.365 151.669 cv
525.556 151.521 525.676 151.313 525.7 151.082 cv
525.714 150.867 525.646 150.659 525.498 150.497 cv
525.439 150.439 li
525.43 150.519 li
525.413 150.715 li
525.405 150.795 li
525.468 150.751 li
cp
false sop
1 /1 /CSD get_res sepcs
1 sep
f
525.468 150.751 mo
525.486 150.743 li
525.597 150.663 li
525.626 150.647 li
525.604 150.611 li
525.527 150.508 li
518.753 141.512 li
518.606 141.316 li
518.559 141.256 li
518.53 141.324 li
518.457 141.557 li
518.043 142.867 517.576 144.131 517.057 145.333 cv
517.02 145.425 li
517.005 145.448 li
517.028 145.47 li
517.105 145.53 li
524.117 151.603 li
524.195 151.671 li
524.221 151.693 li
524.246 151.677 li
524.33 151.613 li
524.343 151.603 li
524.427 151.54 li
524.321 151.534 li
524.145 151.521 li
524.045 151.501 li
524.117 151.585 li
524.427 151.903 524.994 151.949 525.365 151.669 cv
525.556 151.521 525.676 151.313 525.7 151.082 cv
525.714 150.867 525.646 150.659 525.498 150.497 cv
525.439 150.439 li
525.43 150.519 li
525.413 150.715 li
525.405 150.795 li
525.468 150.751 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
535.603 141.512 mo
535.616 141.498 li
535.707 141.408 li
535.734 141.38 li
535.707 141.356 li
535.609 141.26 li
521.155 127.851 li
520.95 127.667 li
520.893 127.607 li
520.884 127.689 li
520.873 127.957 li
520.732 129.985 520.515 131.965 520.228 133.854 cv
520.209 133.934 li
520.208 133.961 li
520.234 133.974 li
520.307 134.021 li
534.432 142.574 li
534.523 142.624 li
534.555 142.642 li
534.574 142.618 li
534.643 142.54 li
534.657 142.532 li
534.724 142.448 li
534.625 142.462 li
534.453 142.48 li
534.353 142.486 li
534.432 142.545 li
534.796 142.821 535.361 142.766 535.674 142.43 cv
535.834 142.258 535.913 142.039 535.899 141.811 cv
535.878 141.596 535.767 141.396 535.583 141.26 cv
535.516 141.208 li
535.524 141.296 li
535.534 141.49 li
535.543 141.578 li
535.603 141.512 li
cp
false sop
1 /1 /CSD get_res sepcs
1 sep
f
535.603 141.512 mo
535.616 141.498 li
535.707 141.408 li
535.734 141.38 li
535.707 141.356 li
535.609 141.26 li
521.155 127.851 li
520.95 127.667 li
520.893 127.607 li
520.884 127.689 li
520.873 127.957 li
520.732 129.985 520.515 131.965 520.228 133.854 cv
520.209 133.934 li
520.208 133.961 li
520.234 133.974 li
520.307 134.021 li
534.432 142.574 li
534.523 142.624 li
534.555 142.642 li
534.574 142.618 li
534.643 142.54 li
534.657 142.532 li
534.724 142.448 li
534.625 142.462 li
534.453 142.48 li
534.353 142.486 li
534.432 142.545 li
534.796 142.821 535.361 142.766 535.674 142.43 cv
535.834 142.258 535.913 142.039 535.899 141.811 cv
535.878 141.596 535.767 141.396 535.583 141.26 cv
535.516 141.208 li
535.524 141.296 li
535.534 141.49 li
535.543 141.578 li
535.603 141.512 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
543.792 130.841 mo
543.8 130.823 li
543.876 130.715 li
543.905 130.679 li
543.864 130.667 li
543.754 130.587 li
520.86 115.691 li
520.626 115.539 li
520.549 115.493 li
520.567 115.577 li
520.605 115.858 li
520.901 117.875 521.054 120.005 521.054 122.171 cv
521.047 122.922 li
521.047 123.237 li
521.047 123.331 li
521.125 123.331 li
521.107 123.357 li
521.072 123.363 li
521.077 123.363 521.125 123.385 521.155 123.4 cv
542.839 132.063 li
542.944 132.105 li
542.974 132.117 li
542.986 132.089 li
543.051 131.999 li
543.057 131.979 li
543.104 131.897 li
543.016 131.919 li
542.839 131.971 li
542.747 131.999 li
542.833 132.045 li
543.244 132.252 543.797 132.113 544.046 131.726 cv
544.163 131.546 544.199 131.31 544.142 131.099 cv
544.082 130.883 543.938 130.703 543.729 130.598 cv
543.65 130.556 li
543.675 130.639 li
543.722 130.823 li
543.742 130.907 li
543.792 130.841 li
cp
false sop
1 /1 /CSD get_res sepcs
1 sep
f
543.792 130.841 mo
543.8 130.823 li
543.876 130.715 li
543.905 130.679 li
543.864 130.667 li
543.754 130.587 li
520.86 115.691 li
520.626 115.539 li
520.549 115.493 li
520.567 115.577 li
520.605 115.858 li
520.901 117.875 521.054 120.005 521.054 122.171 cv
521.047 122.922 li
521.047 123.237 li
521.047 123.331 li
521.125 123.331 li
521.107 123.357 li
521.072 123.363 li
521.077 123.363 521.125 123.385 521.155 123.4 cv
542.839 132.063 li
542.944 132.105 li
542.974 132.117 li
542.986 132.089 li
543.051 131.999 li
543.057 131.979 li
543.104 131.897 li
543.016 131.919 li
542.839 131.971 li
542.747 131.999 li
542.833 132.045 li
543.244 132.252 543.797 132.113 544.046 131.726 cv
544.163 131.546 544.199 131.31 544.142 131.099 cv
544.082 130.883 543.938 130.703 543.729 130.598 cv
543.65 130.556 li
543.675 130.639 li
543.722 130.823 li
543.742 130.907 li
543.792 130.841 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
555.261 94.2476 mo
555.261 94.0342 555.177 93.8384 555.022 93.6807 cv
554.847 93.5112 554.613 93.417 554.375 93.417 cv
554.286 93.417 li
554.355 93.4834 li
554.48 93.6167 li
554.55 93.6807 li
554.55 93.583 li
554.55 93.5649 li
554.55 93.4453 li
554.55 93.4072 li
554.52 93.4072 li
554.395 93.3994 li
523.238 90.4727 li
523.23 90.4727 li
523.222 90.4727 li
523.22 90.4727 li
523.208 90.4727 li
523.053 90.4824 522.924 90.3809 522.91 90.2368 cv
522.904 90.1577 522.924 90.0776 522.968 90.0215 cv
523.003 89.9858 523.055 89.9438 523.141 89.936 cv
523.159 89.936 li
523.163 89.936 li
523.163 89.936 li
523.172 89.936 li
553.299 82.2036 li
553.42 82.1699 li
553.464 82.1621 li
553.449 82.1279 li
553.42 82 li
553.413 81.9878 li
553.396 81.9004 li
553.35 81.9722 li
553.244 82.1279 li
553.195 82.208 li
553.279 82.1899 li
553.52 82.1563 553.731 82.0205 553.859 81.8306 cv
553.988 81.6504 554.035 81.4331 553.994 81.2251 cv
553.912 80.7842 553.443 80.479 552.972 80.5488 cv
552.878 80.5664 li
552.958 80.623 li
553.103 80.7246 li
553.182 80.7783 li
553.163 80.6865 li
553.16 80.6689 li
553.139 80.5586 li
553.132 80.5264 li
553.097 80.5308 li
552.984 80.5347 li
521.728 82.499 li
521.716 82.499 li
521.712 82.499 li
521.712 82.5029 li
521.692 82.5073 li
521.54 82.543 521.386 82.4614 521.342 82.3232 cv
521.324 82.2495 521.334 82.166 521.368 82.1021 cv
521.386 82.0596 521.434 82.0083 521.519 81.9878 cv
521.528 81.9878 li
521.528 81.9878 li
521.534 81.9878 li
521.546 81.9805 li
549.726 69.6807 li
549.843 69.6289 li
549.88 69.6108 li
549.866 69.5747 li
549.813 69.459 li
549.804 69.439 li
549.773 69.3652 li
549.732 69.439 li
549.661 69.6147 li
549.613 69.6982 li
549.702 69.6665 li
549.93 69.5967 550.112 69.4351 550.205 69.2271 cv
550.296 69.0259 550.307 68.8042 550.222 68.6045 cv
550.056 68.1914 549.535 67.9614 549.089 68.0996 cv
548.998 68.1372 li
549.086 68.1733 li
549.251 68.2568 li
549.333 68.2969 li
549.303 68.2051 li
549.295 68.1914 li
549.258 68.0815 li
549.246 68.0498 li
549.216 68.0571 li
549.105 68.0815 li
518.67 74.8911 li
518.662 74.8911 li
518.659 74.8911 li
518.659 74.895 li
518.64 74.895 li
518.49 74.9609 518.279 74.9092 518.213 74.7856 cv
518.185 74.729 518.185 74.6597 518.206 74.5957 cv
518.238 74.5215 518.286 74.4658 518.355 74.4336 cv
518.369 74.4297 li
518.369 74.4297 li
518.378 74.4258 li
518.38 74.4258 li
543.776 57.9043 li
543.891 57.8281 li
543.92 57.8042 li
543.905 57.7725 li
543.826 57.6685 li
543.815 57.6543 li
543.762 57.5811 li
543.748 57.6626 li
543.701 57.8516 li
543.682 57.936 li
543.754 57.8999 li
543.963 57.7881 544.111 57.6089 544.163 57.3848 cv
544.224 57.1733 544.186 56.9438 544.068 56.7539 cv
543.824 56.3828 543.274 56.231 542.857 56.4468 cv
542.77 56.4902 li
542.865 56.5142 li
543.033 56.5664 li
543.132 56.5903 li
543.08 56.5068 li
543.07 56.4902 li
543.016 56.3989 li
542.998 56.375 li
542.969 56.3867 li
542.865 56.4224 li
514.198 67.8677 li
514.183 67.8779 li
514.18 67.8779 li
514.18 67.8779 li
514.168 67.8862 li
514.028 67.9736 513.859 67.9517 513.763 67.8418 cv
513.717 67.7759 513.694 67.6899 513.706 67.6201 cv
513.717 67.5703 513.74 67.5107 513.8 67.4683 cv
513.811 67.4624 li
513.817 67.4585 li
513.817 67.4585 li
513.826 67.4507 li
535.638 47.2231 li
535.734 47.1396 li
535.769 47.1079 li
535.734 47.0796 li
535.647 46.9819 li
535.638 46.9678 li
535.574 46.9082 li
535.565 46.9961 li
535.553 47.1895 li
535.551 47.2715 li
535.619 47.2231 li
535.795 47.0874 535.909 46.8901 535.93 46.6729 cv
535.946 46.4487 535.864 46.2212 535.707 46.0518 cv
535.399 45.7144 534.819 45.6641 534.464 45.938 cv
534.383 45.9951 li
534.486 46.0059 li
534.657 46.0239 li
534.753 46.0337 li
534.69 45.9575 li
534.678 45.9453 li
534.671 45.9453 534.605 45.8662 534.605 45.8662 cv
534.584 45.8457 li
534.555 45.8618 li
534.464 45.9175 li
508.434 61.6611 li
508.424 61.6733 li
508.422 61.6733 li
508.413 61.6733 li
508.413 61.6812 li
508.292 61.7813 508.102 61.769 507.976 61.6528 cv
507.926 61.6069 507.898 61.5474 507.898 61.4873 cv
507.898 61.418 507.926 61.3574 507.976 61.3179 cv
507.986 61.3076 li
507.988 61.3076 li
507.988 61.2979 li
507.998 61.2896 li
525.556 37.9741 li
525.639 37.8726 li
525.667 37.8369 li
525.632 37.8164 li
525.527 37.7344 li
525.506 37.7285 li
525.439 37.6772 li
525.444 37.7666 li
525.468 37.9561 li
525.476 38.0381 li
525.536 37.9785 li
525.685 37.8228 525.761 37.6128 525.737 37.4033 cv
525.714 37.1719 525.597 36.9619 525.405 36.8145 cv
525.033 36.5327 524.462 36.5688 524.157 36.9023 cv
524.086 36.9702 li
524.188 36.9663 li
524.359 36.9502 li
524.462 36.9424 li
524.384 36.8818 li
524.367 36.8706 li
524.286 36.7983 li
524.255 36.7861 li
524.232 36.7983 li
524.157 36.874 li
501.577 56.4224 li
501.568 56.4307 li
501.563 56.439 li
501.563 56.439 li
501.557 56.4502 li
501.458 56.5747 501.263 56.6123 501.132 56.5288 cv
501.059 56.4829 501.005 56.4111 500.992 56.3408 cv
500.99 56.2988 500.99 56.2471 501.03 56.1934 cv
501.036 56.1836 li
501.036 56.1792 li
501.041 56.1792 li
501.053 56.165 li
513.846 30.4399 li
513.902 30.3262 li
513.917 30.2842 li
513.882 30.2705 li
513.77 30.2144 li
513.753 30.2061 li
513.676 30.1626 li
513.701 30.25 li
513.753 30.4316 li
513.77 30.52 li
513.817 30.4458 li
513.933 30.2705 513.963 30.0586 513.911 29.855 cv
513.846 29.626 513.688 29.4321 513.466 29.3159 cv
513.047 29.1006 512.489 29.2285 512.25 29.5972 cv
512.202 29.6792 li
512.294 29.6572 li
512.468 29.6152 li
512.561 29.5874 li
512.47 29.5435 li
512.458 29.5376 li
512.359 29.4819 li
512.341 29.4678 li
512.319 29.4917 li
512.246 29.5791 li
508.834 33.7881 li
508.796 33.832 li
508.859 33.8516 li
509.077 33.9316 li
509.133 33.9473 li
509.133 33.8955 li
509.133 33.8721 li
509.133 33.5103 li
509.133 33.4023 li
509.063 33.4868 li
508.834 33.7681 li
493.315 52.8511 li
493.246 52.9453 li
493.348 52.917 li
493.505 52.8848 li
493.617 52.8569 li
493.515 52.8057 li
488.313 50.2783 479.472 48.7207 475.435 48.7207 cv
475.363 48.7207 475.233 48.7148 475.073 48.7148 cv
466.798 48.5068 460.636 50.1382 457.264 53.4282 cv
455.314 55.3306 454.328 57.7881 454.328 60.7363 cv
454.328 64.7754 456.607 68.0894 461.502 71.1636 cv
465.888 73.9053 471.966 76.1987 478.406 78.6323 cv
486.809 81.8086 496.333 85.4058 504.132 90.7778 cv
513.085 96.9492 518.355 104.499 520.257 113.854 cv
520.272 113.932 li
520.272 113.96 li
520.297 113.964 li
520.376 113.982 li
549.083 120.41 li
549.193 120.438 li
549.228 120.438 li
549.237 120.41 li
549.281 120.306 li
549.286 120.291 li
549.316 120.203 li
549.228 120.242 li
549.076 120.322 li
548.982 120.358 li
549.076 120.386 li
549.52 120.534 550.036 120.306 550.205 119.885 cv
550.288 119.682 550.282 119.464 550.184 119.269 cv
550.091 119.054 549.913 118.893 549.69 118.821 cv
549.599 118.797 li
549.637 118.875 li
549.72 119.05 li
549.751 119.129 li
549.79 119.05 li
549.79 119.037 li
549.843 118.917 li
549.86 118.881 li
549.82 118.865 li
549.71 118.809 li
521.586 106.532 li
521.575 106.528 li
521.572 106.528 li
521.569 106.528 li
521.551 106.517 li
521.486 106.503 521.438 106.463 521.405 106.397 cv
521.359 106.324 521.347 106.24 521.368 106.168 cv
521.411 106.024 521.575 105.948 521.742 105.989 cv
521.75 105.989 li
521.753 105.989 li
521.753 105.989 li
521.768 105.989 li
552.978 107.961 li
553.091 107.969 li
553.125 107.969 li
553.132 107.933 li
553.151 107.821 li
553.151 107.807 li
553.168 107.711 li
553.091 107.766 li
552.947 107.873 li
552.87 107.929 li
552.958 107.941 li
553.429 108.017 553.901 107.705 553.988 107.264 cv
554.028 107.056 553.979 106.845 553.853 106.667 cv
553.718 106.471 553.504 106.342 553.274 106.3 cv
553.182 106.288 li
553.232 106.362 li
553.343 106.517 li
553.391 106.591 li
553.409 106.503 li
553.413 106.492 li
553.443 106.366 li
553.443 106.328 li
553.409 106.32 li
553.288 106.288 li
523.197 98.5659 li
523.19 98.5659 li
523.185 98.5659 li
523.172 98.5659 li
523.167 98.5601 li
523.085 98.5542 523.018 98.5142 522.962 98.4541 cv
522.918 98.3979 522.898 98.334 522.91 98.2744 cv
522.918 98.1411 523.053 97.9971 523.23 98.0107 cv
523.238 98.0166 li
523.244 98.0166 li
523.244 98.0107 li
523.255 98.0107 li
554.395 95.0903 li
554.52 95.082 li
554.55 95.0762 li
554.55 95.04 li
554.55 94.9209 li
554.55 94.9004 li
554.55 94.813 li
554.48 94.8789 li
554.345 95.0166 li
554.286 95.0762 li
554.375 95.0762 li
554.613 95.0762 554.847 94.9805 555.022 94.8184 cv
555.177 94.6606 555.261 94.4551 555.261 94.2476 cv
cp
false sop
1 /1 /CSD get_res sepcs
1 sep
f
555.261 94.2476 mo
555.261 94.0342 555.177 93.8384 555.022 93.6807 cv
554.847 93.5112 554.613 93.417 554.375 93.417 cv
554.286 93.417 li
554.355 93.4834 li
554.48 93.6167 li
554.55 93.6807 li
554.55 93.583 li
554.55 93.5649 li
554.55 93.4453 li
554.55 93.4072 li
554.52 93.4072 li
554.395 93.3994 li
523.238 90.4727 li
523.23 90.4727 li
523.222 90.4727 li
523.22 90.4727 li
523.208 90.4727 li
523.053 90.4824 522.924 90.3809 522.91 90.2368 cv
522.904 90.1577 522.924 90.0776 522.968 90.0215 cv
523.003 89.9858 523.055 89.9438 523.141 89.936 cv
523.159 89.936 li
523.163 89.936 li
523.163 89.936 li
523.172 89.936 li
553.299 82.2036 li
553.42 82.1699 li
553.464 82.1621 li
553.449 82.1279 li
553.42 82 li
553.413 81.9878 li
553.396 81.9004 li
553.35 81.9722 li
553.244 82.1279 li
553.195 82.208 li
553.279 82.1899 li
553.52 82.1563 553.731 82.0205 553.859 81.8306 cv
553.988 81.6504 554.035 81.4331 553.994 81.2251 cv
553.912 80.7842 553.443 80.479 552.972 80.5488 cv
552.878 80.5664 li
552.958 80.623 li
553.103 80.7246 li
553.182 80.7783 li
553.163 80.6865 li
553.16 80.6689 li
553.139 80.5586 li
553.132 80.5264 li
553.097 80.5308 li
552.984 80.5347 li
521.728 82.499 li
521.716 82.499 li
521.712 82.499 li
521.712 82.5029 li
521.692 82.5073 li
521.54 82.543 521.386 82.4614 521.342 82.3232 cv
521.324 82.2495 521.334 82.166 521.368 82.1021 cv
521.386 82.0596 521.434 82.0083 521.519 81.9878 cv
521.528 81.9878 li
521.528 81.9878 li
521.534 81.9878 li
521.546 81.9805 li
549.726 69.6807 li
549.843 69.6289 li
549.88 69.6108 li
549.866 69.5747 li
549.813 69.459 li
549.804 69.439 li
549.773 69.3652 li
549.732 69.439 li
549.661 69.6147 li
549.613 69.6982 li
549.702 69.6665 li
549.93 69.5967 550.112 69.4351 550.205 69.2271 cv
550.296 69.0259 550.307 68.8042 550.222 68.6045 cv
550.056 68.1914 549.535 67.9614 549.089 68.0996 cv
548.998 68.1372 li
549.086 68.1733 li
549.251 68.2568 li
549.333 68.2969 li
549.303 68.2051 li
549.295 68.1914 li
549.258 68.0815 li
549.246 68.0498 li
549.216 68.0571 li
549.105 68.0815 li
518.67 74.8911 li
518.662 74.8911 li
518.659 74.8911 li
518.659 74.895 li
518.64 74.895 li
518.49 74.9609 518.279 74.9092 518.213 74.7856 cv
518.185 74.729 518.185 74.6597 518.206 74.5957 cv
518.238 74.5215 518.286 74.4658 518.355 74.4336 cv
518.369 74.4297 li
518.369 74.4297 li
518.378 74.4258 li
518.38 74.4258 li
543.776 57.9043 li
543.891 57.8281 li
543.92 57.8042 li
543.905 57.7725 li
543.826 57.6685 li
543.815 57.6543 li
543.762 57.5811 li
543.748 57.6626 li
543.701 57.8516 li
543.682 57.936 li
543.754 57.8999 li
543.963 57.7881 544.111 57.6089 544.163 57.3848 cv
544.224 57.1733 544.186 56.9438 544.068 56.7539 cv
543.824 56.3828 543.274 56.231 542.857 56.4468 cv
542.77 56.4902 li
542.865 56.5142 li
543.033 56.5664 li
543.132 56.5903 li
543.08 56.5068 li
543.07 56.4902 li
543.016 56.3989 li
542.998 56.375 li
542.969 56.3867 li
542.865 56.4224 li
514.198 67.8677 li
514.183 67.8779 li
514.18 67.8779 li
514.18 67.8779 li
514.168 67.8862 li
514.028 67.9736 513.859 67.9517 513.763 67.8418 cv
513.717 67.7759 513.694 67.6899 513.706 67.6201 cv
513.717 67.5703 513.74 67.5107 513.8 67.4683 cv
513.811 67.4624 li
513.817 67.4585 li
513.817 67.4585 li
513.826 67.4507 li
535.638 47.2231 li
535.734 47.1396 li
535.769 47.1079 li
535.734 47.0796 li
535.647 46.9819 li
535.638 46.9678 li
535.574 46.9082 li
535.565 46.9961 li
535.553 47.1895 li
535.551 47.2715 li
535.619 47.2231 li
535.795 47.0874 535.909 46.8901 535.93 46.6729 cv
535.946 46.4487 535.864 46.2212 535.707 46.0518 cv
535.399 45.7144 534.819 45.6641 534.464 45.938 cv
534.383 45.9951 li
534.486 46.0059 li
534.657 46.0239 li
534.753 46.0337 li
534.69 45.9575 li
534.678 45.9453 li
534.671 45.9453 534.605 45.8662 534.605 45.8662 cv
534.584 45.8457 li
534.555 45.8618 li
534.464 45.9175 li
508.434 61.6611 li
508.424 61.6733 li
508.422 61.6733 li
508.413 61.6733 li
508.413 61.6812 li
508.292 61.7813 508.102 61.769 507.976 61.6528 cv
507.926 61.6069 507.898 61.5474 507.898 61.4873 cv
507.898 61.418 507.926 61.3574 507.976 61.3179 cv
507.986 61.3076 li
507.988 61.3076 li
507.988 61.2979 li
507.998 61.2896 li
525.556 37.9741 li
525.639 37.8726 li
525.667 37.8369 li
525.632 37.8164 li
525.527 37.7344 li
525.506 37.7285 li
525.439 37.6772 li
525.444 37.7666 li
525.468 37.9561 li
525.476 38.0381 li
525.536 37.9785 li
525.685 37.8228 525.761 37.6128 525.737 37.4033 cv
525.714 37.1719 525.597 36.9619 525.405 36.8145 cv
525.033 36.5327 524.462 36.5688 524.157 36.9023 cv
524.086 36.9702 li
524.188 36.9663 li
524.359 36.9502 li
524.462 36.9424 li
524.384 36.8818 li
524.367 36.8706 li
524.286 36.7983 li
524.255 36.7861 li
524.232 36.7983 li
524.157 36.874 li
501.577 56.4224 li
501.568 56.4307 li
501.563 56.439 li
501.563 56.439 li
501.557 56.4502 li
501.458 56.5747 501.263 56.6123 501.132 56.5288 cv
501.059 56.4829 501.005 56.4111 500.992 56.3408 cv
500.99 56.2988 500.99 56.2471 501.03 56.1934 cv
501.036 56.1836 li
501.036 56.1792 li
501.041 56.1792 li
501.053 56.165 li
513.846 30.4399 li
513.902 30.3262 li
513.917 30.2842 li
513.882 30.2705 li
513.77 30.2144 li
513.753 30.2061 li
513.676 30.1626 li
513.701 30.25 li
513.753 30.4316 li
513.77 30.52 li
513.817 30.4458 li
513.933 30.2705 513.963 30.0586 513.911 29.855 cv
513.846 29.626 513.688 29.4321 513.466 29.3159 cv
513.047 29.1006 512.489 29.2285 512.25 29.5972 cv
512.202 29.6792 li
512.294 29.6572 li
512.468 29.6152 li
512.561 29.5874 li
512.47 29.5435 li
512.458 29.5376 li
512.359 29.4819 li
512.341 29.4678 li
512.319 29.4917 li
512.246 29.5791 li
508.834 33.7881 li
508.796 33.832 li
508.859 33.8516 li
509.077 33.9316 li
509.133 33.9473 li
509.133 33.8955 li
509.133 33.8721 li
509.133 33.5103 li
509.133 33.4023 li
509.063 33.4868 li
508.834 33.7681 li
493.315 52.8511 li
493.246 52.9453 li
493.348 52.917 li
493.505 52.8848 li
493.617 52.8569 li
493.515 52.8057 li
488.313 50.2783 479.472 48.7207 475.435 48.7207 cv
475.363 48.7207 475.233 48.7148 475.073 48.7148 cv
466.798 48.5068 460.636 50.1382 457.264 53.4282 cv
455.314 55.3306 454.328 57.7881 454.328 60.7363 cv
454.328 64.7754 456.607 68.0894 461.502 71.1636 cv
465.888 73.9053 471.966 76.1987 478.406 78.6323 cv
486.809 81.8086 496.333 85.4058 504.132 90.7778 cv
513.085 96.9492 518.355 104.499 520.257 113.854 cv
520.272 113.932 li
520.272 113.96 li
520.297 113.964 li
520.376 113.982 li
549.083 120.41 li
549.193 120.438 li
549.228 120.438 li
549.237 120.41 li
549.281 120.306 li
549.286 120.291 li
549.316 120.203 li
549.228 120.242 li
549.076 120.322 li
548.982 120.358 li
549.076 120.386 li
549.52 120.534 550.036 120.306 550.205 119.885 cv
550.288 119.682 550.282 119.464 550.184 119.269 cv
550.091 119.054 549.913 118.893 549.69 118.821 cv
549.599 118.797 li
549.637 118.875 li
549.72 119.05 li
549.751 119.129 li
549.79 119.05 li
549.79 119.037 li
549.843 118.917 li
549.86 118.881 li
549.82 118.865 li
549.71 118.809 li
521.586 106.532 li
521.575 106.528 li
521.572 106.528 li
521.569 106.528 li
521.551 106.517 li
521.486 106.503 521.438 106.463 521.405 106.397 cv
521.359 106.324 521.347 106.24 521.368 106.168 cv
521.411 106.024 521.575 105.948 521.742 105.989 cv
521.75 105.989 li
521.753 105.989 li
521.753 105.989 li
521.768 105.989 li
552.978 107.961 li
553.091 107.969 li
553.125 107.969 li
553.132 107.933 li
553.151 107.821 li
553.151 107.807 li
553.168 107.711 li
553.091 107.766 li
552.947 107.873 li
552.87 107.929 li
552.958 107.941 li
553.429 108.017 553.901 107.705 553.988 107.264 cv
554.028 107.056 553.979 106.845 553.853 106.667 cv
553.718 106.471 553.504 106.342 553.274 106.3 cv
553.182 106.288 li
553.232 106.362 li
553.343 106.517 li
553.391 106.591 li
553.409 106.503 li
553.413 106.492 li
553.443 106.366 li
553.443 106.328 li
553.409 106.32 li
553.288 106.288 li
523.197 98.5659 li
523.19 98.5659 li
523.185 98.5659 li
523.172 98.5659 li
523.167 98.5601 li
523.085 98.5542 523.018 98.5142 522.962 98.4541 cv
522.918 98.3979 522.898 98.334 522.91 98.2744 cv
522.918 98.1411 523.053 97.9971 523.23 98.0107 cv
523.238 98.0166 li
523.244 98.0166 li
523.244 98.0107 li
523.255 98.0107 li
554.395 95.0903 li
554.52 95.082 li
554.55 95.0762 li
554.55 95.04 li
554.55 94.9209 li
554.55 94.9004 li
554.55 94.813 li
554.48 94.8789 li
554.345 95.0166 li
554.286 95.0762 li
554.375 95.0762 li
554.613 95.0762 554.847 94.9805 555.022 94.8184 cv
555.177 94.6606 555.261 94.4551 555.261 94.2476 cv
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
648.644 24.5889 mo
650.003 24.5889 li
650.876 24.5889 651.438 24.4087 651.438 23.5029 cv
651.438 22.708 650.729 22.4805 650.003 22.4805 cv
648.644 22.4805 li
648.644 24.5889 li
cp
647.505 21.5859 mo
650.187 21.5859 li
651.783 21.5859 652.584 22.231 652.584 23.5527 cv
652.584 24.6763 651.87 25.4868 650.781 25.4868 cv
652.763 28.5811 li
651.556 28.5811 li
649.602 25.4868 li
648.644 25.4868 li
648.644 28.5811 li
647.505 28.5811 li
647.505 21.5859 li
cp
649.804 30.1587 mo
652.542 30.1587 654.616 27.9463 654.616 25.0918 cv
654.616 22.231 652.542 20.019 649.804 20.019 cv
647.028 20.019 644.957 22.231 644.957 25.0918 cv
644.957 27.9463 647.028 30.1587 649.804 30.1587 cv
cp
649.787 19.1187 mo
653.073 19.1187 655.755 21.7979 655.755 25.0918 cv
655.755 28.3774 653.073 31.0566 649.787 31.0566 cv
646.496 31.0566 643.817 28.3774 643.817 25.0918 cv
643.817 21.7979 646.496 19.1187 649.787 19.1187 cv
cp
false sop
1 /0 /CSD get_res sepcs
1 sep
f
193.532 305.179 mo
212.468 324.846 li
212.468 324.846 215.487 324.325 217.774 321.619 cv
217.774 321.619 223.495 315.582 223.288 294.67 cv
223.288 294.67 202.999 300.183 193.532 304.554 cv
193.532 304.554 193.193 304.825 193.532 305.179 cv
cp
89.8984 184.689 mo
98.8462 185.418 104.985 192.492 104.985 192.492 cv
114.141 201.232 107.898 215.903 107.898 215.903 cv
127.875 237.024 li
129.694 216.966 117.887 191.973 117.887 191.973 cv
108.314 168.042 93.9565 152.095 93.9565 152.095 cv
88.6499 146.242 86.5435 151.549 86.5435 151.549 cv
83.6563 156.622 83.3433 184.948 83.3433 184.948 cv
84.7993 184.271 89.8984 184.689 89.8984 184.689 cv
cp
123.386 135.542 mo
123.386 135.542 109.564 111.126 109.98 81.4717 cv
109.98 81.4717 84.9043 38.395 121.529 11.9668 cv
121.529 11.9668 120.072 35.3784 128.084 40.5806 cv
128.084 40.5806 142.496 30.5137 156.23 30.9819 cv
156.23 30.9819 170.199 19.4302 160.288 0 cv
160.288 0 194.39 5.15234 193.766 38.6299 cv
193.766 38.6299 204.222 46.7451 207.422 51.584 cv
207.422 51.584 216.865 46.1997 221.859 54.9395 cv
221.859 54.9395 216.318 55.4077 213.821 60.0117 cv
213.821 60.0117 225.917 76.3218 226.463 95.6748 cv
226.463 95.6748 243.085 95.9092 248.626 115.106 cv
248.626 115.106 255.883 140.39 244.1 160.055 cv
244.1 160.055 242.149 163.333 243.865 164.971 cv
243.865 164.971 247.065 167.39 248.001 168.951 cv
248.001 168.951 252.137 175.272 252.996 187.056 cv
252.996 187.056 254.479 202.663 254.322 214.058 cv
254.322 239.42 li
254.322 239.42 272.662 237.156 280.465 244.647 cv
280.465 244.647 287.566 250.423 286.785 264.157 cv
286.785 264.157 286.239 286.318 292.014 296.931 cv
292.014 296.931 295.214 266.966 305.046 250.265 cv
305.046 250.265 311.757 239.42 317.142 232.785 cv
317.142 232.785 323.229 225.762 322.137 216.007 cv
322.137 216.007 334.701 220.845 338.836 241.681 cv
338.836 241.681 343.674 265.717 337.354 283.354 cv
337.354 283.354 334.232 293.029 330.487 298.259 cv
330.487 298.259 325.101 305.983 323.229 313.864 cv
323.229 313.864 316.674 339.695 307.7 345.313 cv
307.7 345.313 302.993 349.296 294.355 344.872 cv
294.355 344.872 271.334 333.451 260.8 310.275 cv
260.8 310.275 254.479 296.541 253.23 286.084 cv
253.23 286.084 246.909 326.43 245.973 342.27 cv
245.973 342.27 246.05 354.68 244.255 358.112 cv
259.161 373.407 li
280.387 351.558 li
280.387 351.558 281.323 350.385 282.337 351.401 cv
316.283 383.864 li
316.283 383.864 351.166 416.483 356.316 420.698 cv
356.316 420.698 356.263 421.037 353.871 420.309 cv
353.871 420.309 326.819 415.157 283.898 375.357 cv
271.88 387.532 li
314.488 437.475 li
319.117 427.644 li
319.117 427.644 319.221 427.02 319.639 429.255 cv
319.639 429.255 321.043 440.518 332.125 462.37 cv
332.125 462.37 334.83 468.066 335.974 470.304 cv
335.974 470.304 336.18 470.722 334.724 469.68 cv
334.724 469.68 329.004 464.633 315.659 459.562 cv
315.659 459.562 303.174 454.643 296.618 452.379 cv
296.618 452.379 295.682 452.122 296.567 451.679 cv
304.449 447.178 li
258.146 398.614 li
247.845 408.394 li
247.845 408.394 282.182 456.516 281.089 486.952 cv
281.089 486.952 281.206 487.809 280.542 486.522 cv
280.542 486.522 260.8 444.499 220.844 407.665 cv
245.973 385.504 li
231.458 369.429 li
231.458 369.429 219.752 376.216 204.222 361.625 cv
204.222 361.625 188.538 347.5 198.448 333.999 cv
177.456 311.211 li
177.456 311.211 164.97 316.362 135.316 336.339 cv
135.316 336.339 101.76 362.247 82.5635 357.723 cv
82.5635 357.723 73.667 356.785 67.8926 337.121 cv
67.8926 337.121 65.7075 328.849 64.771 319.016 cv
64.771 319.016 64.4585 314.333 63.6006 312.07 cv
63.6006 312.07 62.1177 307.544 57.3574 312.149 cv
57.3574 312.149 52.5972 317.298 49.3193 320.108 cv
49.3193 320.108 43.1548 325.572 39.7993 327.755 cv
39.7993 327.755 28.3276 335.949 25.1284 338.603 cv
25.1284 338.603 18.729 343.208 19.6655 347.89 cv
19.6655 347.89 19.6655 348.825 18.1826 346.718 cv
18.1826 346.718 9.44287 334.271 13.4614 322.803 cv
13.4614 322.803 14.7734 317.871 19.873 308.402 cv
19.873 308.402 34.0239 284.682 62.5332 268.554 cv
62.5332 268.554 77.7251 257.732 82.5107 271.777 cv
82.5107 271.777 85.2153 279.893 86.0483 286.553 cv
86.0483 286.553 89.8975 306.843 95.1006 311.733 cv
95.1006 311.733 97.4937 314.542 101.76 309.756 cv
101.76 309.756 114.245 295.71 120.072 282.286 cv
120.072 282.286 106.234 267.72 86.7769 259.917 cv
86.7769 259.917 63.4688 251.281 46.7178 242.438 cv
46.7178 242.438 25.9087 231.822 18.417 225.27 cv
17.272 234.528 li
17.272 234.528 2.65332 222.718 .000488281 171.839 cv
.000488281 171.839 -.0390625 170.864 .819336 172.112 cv
.819336 172.112 19.8203 196.031 26.1162 202.013 cv
26.1162 202.013 36.4688 212.679 40.4238 213.408 cv
40.4238 213.408 41.7759 213.772 40.0586 214.188 cv
40.0586 214.188 34.4922 215.798 32.9316 216.163 cv
32.9316 216.163 41.4106 227.453 71.0649 238.171 cv
71.0649 238.171 115.912 251.593 125.691 259.605 cv
125.691 259.605 126.108 258.043 126.108 255.755 cv
98.8462 226.31 li
98.8462 226.31 91.3545 232.031 78.5571 224.227 cv
78.5571 224.227 58.0601 212.47 55.77 179.174 cv
34.3359 156.804 li
34.3359 156.804 28.7959 150.457 33.2441 146.555 cv
33.2441 146.555 37.4575 143.121 43.2329 148.975 cv
55.25 161.304 li
55.25 161.304 55.77 126.317 65.9668 98.8477 cv
65.9668 98.8477 68.5161 92.4751 72.4185 91.6948 cv
72.4185 91.6948 76.1641 89.978 83.9683 97.938 cv
83.9683 97.938 118.951 130.615 123.386 135.542 cv
cp
f
55.1284 172.876 mo
55.1284 172.876 55.1816 169.457 55.1816 167.231 cv
41.5557 152.899 li
41.5557 152.899 37.2681 148.068 35.8022 149.913 cv
35.8022 149.913 34.2827 150.564 38.4077 155.071 cv
55.1284 172.876 li
cp
1 /1 /CSD get_res sepcs
1 sep
f
94.8931 216.086 mo
94.8931 216.086 95.2051 212.809 99.2632 212.419 cv
208.515 326.715 li
208.515 326.715 203.806 328.173 201.125 331.086 cv
94.8931 216.086 li
cp
f
228.492 360.634 mo
228.492 360.634 229.896 355.745 235.254 354.236 cv
258.978 378.999 li
281.452 356.265 li
281.452 356.265 313.502 386.905 324.841 397.156 cv
324.841 397.156 337.744 408.812 339.46 410.631 cv
339.46 410.631 339.668 410.996 338.629 410.474 cv
338.629 410.474 327.053 404.336 321.747 400.59 cv
321.747 400.59 294.328 380.956 283.898 369.818 cv
266.887 386.752 li
266.887 386.752 266.314 387.117 267.069 388.001 cv
267.069 388.001 309.163 437.047 315.329 444.361 cv
315.329 444.361 315.757 444.849 316.069 444.108 cv
317.903 439.993 li
317.903 439.993 318.02 439.271 318.312 440.148 cv
318.312 440.148 323.542 453.98 326.195 459.169 cv
326.195 459.169 326.558 459.796 325.725 459.457 cv
325.725 459.457 309.937 452.746 306.19 451.757 cv
306.19 451.757 304.993 451.418 306.085 450.873 cv
310.533 448.348 li
310.533 448.348 310.84 448.147 310.528 447.855 cv
310.528 447.855 265.95 401.109 259.083 393.93 cv
259.083 393.93 258.479 393.229 257.716 393.911 cv
242.746 407.382 li
242.746 407.382 242.421 407.588 242.734 407.997 cv
242.734 407.997 267.823 444.081 274.273 466.767 cv
274.273 466.767 274.377 467.402 273.715 466.349 cv
273.715 466.349 253.464 431.388 226.463 407.665 cv
251.279 385.659 li
228.492 360.634 li
cp
f
212.572 247.145 mo
212.572 247.145 209.373 241.839 221.937 229.194 cv
222.717 243.554 li
212.572 247.145 li
cp
f
142.145 82.0962 mo
145.071 80.2231 150.26 80.6523 150.26 80.6523 cv
154.591 80.8867 161.692 87.7148 161.692 87.7148 cv
162.668 88.5732 161.811 89.1719 161.811 89.1719 cv
156.787 94.5127 161.229 106.517 161.229 106.517 cv
168.95 125.977 180.002 123.755 180.002 123.755 cv
189.149 121.112 184.497 106.147 184.497 106.147 cv
184.072 105.038 184.708 104.931 184.708 104.931 cv
189.891 102.499 187.616 94.937 187.616 94.937 cv
186.56 90.8647 183.65 87.5337 183.65 87.5337 cv
184.019 90.8647 182.909 92.8745 182.909 92.8745 cv
181.641 95.624 178.838 93.0332 178.838 93.0332 cv
174.82 88.2212 163.609 78.9673 163.609 78.9673 cv
157.315 73.5737 151.394 74.7368 151.394 74.7368 cv
146.371 74.9487 141.717 81.7168 141.717 81.7168 cv
141.215 82.395 142.145 82.0962 142.145 82.0962 cv
cp
179.719 135.941 mo
178.822 135.552 178.861 135.786 178.861 135.786 cv
185.689 146.75 202.35 145.58 202.35 145.58 cv
210.31 144.331 208.476 136.215 208.476 136.215 cv
208.397 135.005 208.983 134.927 208.983 134.927 cv
209.724 134.966 209.686 135.63 209.686 135.63 cv
211.051 139.57 214.094 140.273 214.094 140.273 cv
219.674 140.936 223.537 136.254 223.537 136.254 cv
230.249 129.114 229.858 117.096 229.858 117.096 cv
229.896 116.12 229.663 116.12 229.663 116.12 cv
225.292 129.23 221.039 127.943 221.039 127.943 cv
222.328 126.304 222.522 120.958 222.522 120.958 cv
222.717 115.925 218.621 114.287 218.621 114.287 cv
215.343 112.569 204.925 113.351 204.925 113.351 cv
204.105 113.467 204.067 114.053 204.067 114.053 cv
204.067 114.794 204.82 114.768 204.82 114.768 cv
218.399 115.757 217.879 120.075 217.879 120.075 cv
218.711 129.96 201.491 129.647 201.491 129.647 cv
195.042 129.854 195.093 127.098 195.093 127.098 cv
194.675 125.33 196.288 124.132 196.288 124.132 cv
197.278 123.145 198.682 122.051 198.682 122.051 cv
200.711 119.866 197.902 119.866 197.902 119.866 cv
189.474 120.594 189.681 128.398 189.681 128.398 cv
189.939 134.693 197.224 137.086 197.224 137.086 cv
188.354 138.505 179.719 135.941 179.719 135.941 cv
cp
183.021 126.109 mo
189.942 127.097 192.854 119.034 192.854 119.034 cv
193.529 117.733 194.259 117.369 194.259 117.369 cv
195.976 116.796 194.883 116.329 194.883 116.329 cv
190.305 116.329 187.913 121.011 187.913 121.011 cv
185.935 124.757 182.814 125.069 182.814 125.069 cv
181.826 125.849 183.021 126.109 183.021 126.109 cv
cp
184.999 191.973 mo
194.207 196.966 203.313 192.544 203.313 192.544 cv
213.041 188.747 218.972 180.943 218.972 180.943 cv
221.416 178.342 220.115 177.146 220.115 177.146 cv
218.608 176.156 215.745 179.643 215.745 179.643 cv
209.659 185.677 201.698 187.967 201.698 187.967 cv
191.92 190.568 187.808 188.226 187.808 188.226 cv
183.179 186.25 183.023 189.267 183.023 189.267 cv
182.972 190.828 184.999 191.973 184.999 191.973 cv
cp
149.831 158.885 mo
145.929 140.208 164.761 141.924 164.761 141.924 cv
168.923 142.496 165.75 140.78 165.75 140.78 cv
149.519 134.849 145.617 143.433 145.617 143.433 cv
142.027 152.018 149.05 160.679 149.05 160.679 cv
150.768 161.589 149.831 158.885 149.831 158.885 cv
cp
195.663 182.815 mo
208.41 181.879 219.908 166.376 219.908 166.376 cv
224.708 160.835 229.116 149.325 229.116 149.325 cv
230.365 145.97 231.263 138.478 231.263 138.478 cv
231.34 136.761 232.315 137.542 232.315 137.542 cv
234.228 138.829 235.632 141.638 235.632 141.638 cv
235.906 142.575 236.086 142.133 236.086 142.133 cv
237.542 136.463 235.099 129.699 235.099 129.699 cv
233.225 125.849 232.289 126.369 232.289 126.369 cv
230.833 126.266 229.219 130.531 229.219 130.531 cv
225.422 138.387 216.37 144.682 216.37 144.682 cv
206.381 152.381 191.971 151.393 191.971 151.393 cv
178.339 151.289 166.114 147.283 166.114 147.283 cv
160.861 145.358 156.75 145.306 156.75 145.306 cv
151.704 145.15 153.837 150.821 153.837 150.821 cv
156.021 156.961 163.565 165.336 163.565 165.336 cv
180.89 185.991 195.663 182.815 195.663 182.815 cv
cp
153.68 134.745 mo
153.68 134.745 132.664 128.918 135.264 92.709 cv
135.264 92.709 138.177 66.2808 162.212 64.6162 cv
162.212 64.6162 175.842 62.7432 184.48 74.292 cv
184.48 74.292 177.195 56.9175 190.513 54.7314 cv
190.513 54.7314 196.341 54.1064 201.959 58.7891 cv
201.959 58.7891 199.877 61.7026 197.59 76.4775 cv
197.59 76.4775 196.758 88.2344 190.93 80.9512 cv
190.93 80.9512 190.41 91.8765 196.965 92.917 cv
196.965 92.917 200.708 112.999 210.178 112.062 cv
210.178 112.062 219.023 111.021 219.23 99.0557 cv
219.23 99.0557 220.481 77.3091 208.41 72.8354 cv
208.41 72.8354 209.449 68.9863 210.802 66.1772 cv
210.802 66.1772 221.935 79.8071 221.103 104.155 cv
221.103 104.155 232.343 102.177 237.127 108.212 cv
237.127 108.212 248.467 119.242 241.392 147.231 cv
241.392 147.231 235.254 176.053 209.763 195.093 cv
209.763 195.093 208.515 196.237 207.161 198.319 cv
207.161 198.319 203.728 204.146 200.294 207.892 cv
200.294 207.892 204.247 199.568 203.208 196.861 cv
203.208 196.861 199.462 204.979 197.59 210.286 cv
197.59 210.286 194.987 212.156 193.427 213.301 cv
193.427 213.301 199.567 204.561 198.733 198.11 cv
198.733 198.11 194.883 206.228 192.698 211.636 cv
192.698 211.636 191.971 214.058 190.254 214.29 cv
188.381 214.524 li
188.381 214.524 188.303 214.369 189.005 213.199 cv
189.005 213.199 192.049 209.141 191.737 199.933 cv
191.737 199.933 168.715 200.947 159.429 194.236 cv
159.429 194.236 135.367 179.694 135.367 157.948 cv
135.367 157.948 134.119 136.409 153.68 134.745 cv
cp
f
174.725 170.357 mo
174.725 154.281 li
174.725 154.281 170.823 153.812 166.843 152.408 cv
166.843 152.408 161.615 150.222 161.692 152.563 cv
161.692 152.563 161.068 154.124 164.736 158.416 cv
164.736 158.416 171.603 167.625 174.725 170.357 cv
cp
0 3.09944e-05 3.09944e-05 3.09944e-05 cmyk
f
177.925 172.854 mo
177.925 155.139 li
177.925 155.139 186.196 156.856 194.702 157.012 cv
194.702 177.77 li
194.702 177.77 185.182 177.77 177.925 172.854 cv
cp
f
198.058 177.535 mo
198.058 156.856 li
198.058 156.856 205.706 156.465 212.495 152.875 cv
212.495 168.717 li
212.495 168.717 205.394 177.146 198.058 177.535 cv
cp
f
215.85 164.582 mo
215.85 151.236 li
215.85 151.236 218.347 150.379 221.391 147.726 cv
221.391 147.726 223.654 145.697 222.952 149.287 cv
222.952 149.287 221.145 158.413 215.85 164.582 cv
cp
f
181.592 119.554 mo
181.592 119.554 178.314 125.251 169.34 115.496 cv
169.34 115.496 157.557 100.201 163.956 90.6802 cv
163.956 90.6802 170.745 99.2646 174.1 101.996 cv
174.1 101.996 176.987 104.571 181.514 105.507 cv
181.514 105.507 182.528 107.615 182.606 109.331 cv
182.606 109.331 181.436 106.99 178.159 105.273 cv
178.08 109.955 li
178.08 109.955 175.895 109.253 174.1 107.692 cv
174.1 107.692 174.256 118.617 181.592 119.554 cv
cp
f
203.911 104.805 mo
203.911 104.805 200.165 98.9521 199.775 92.6309 cv
199.775 92.6309 202.193 92.397 203.677 88.4951 cv
203.677 88.4951 207.422 77.8042 207.657 75.4634 cv
207.657 75.4634 215.07 78.1167 216.708 92.4751 cv
216.708 92.4751 217.879 106.131 211.636 109.175 cv
211.636 109.175 214.68 102.386 209.607 95.9092 cv
207.813 100.279 li
204.613 96.2212 li
204.613 96.2212 203.208 100.357 203.911 104.805 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 14.0.0%%For: (Graphics) ()%%Title: (Sparky.eps)%%CreationDate: 10/28/10 10:16 AM%%Canvassize: 16383%AI9_DataStream%Gb!Q;pO;\EZKQ];h>rcN3nOX1#pFC]+Fte'+9b)e:d\B$IJ8folus_!j$q_:[Eh#5lu*P?*fWY<V6R,Qe8i%^:DT_Tnt2j@7%4:S%3TTq(K2fd"[2()BK8lsf2b;;EkiVR8,@Te/Gq#0j_$a[i0LYcrXj")[Rh$:hb'M_[Cc:P>Cq8Cjc&\D-1j7*f_/-RXgRO^TH;g"b%Gopkc-F6!U\Xn#Rk-11;D'[Y,m3]1=dr+"_XJ9Al*CA$M2?m4:!2uh6s(7_g(VSM)5H"S+62uBDO#Q8gW/Z;A%^oT/!8p,"cqEgc%gZ=sCc<a(+<Qe0@1J.DeBa=9O$#L@gB%k[oc(aF8W0o=Q?7GsT7,T.U+G?/9a*ns*'2ei[VA(/prl>$.1)N_DgN@-j=Y@E.bZ(Wq%q.eL6%e+N6,Hr5$57p<`$GY8c5ZZZu%&<h5"Y"LH&n%:;CGbg%1ADfj:2dGj/iR9p`0EoT=e"Juq`=Pf5j_C$1=IMf[(bm=K6;#c%f`L:)Jjl'Y*gciA/8D'WGB:)#U-!r+6ONiK*NG\'BWqX]>L%D*N_skb?m!5-QTBU#CM(u@!9Ma=;-ha-[N7Y-_.:Fq5Ptnr$A@>e%#VokdBFLL92C:fHGU1bX!(L?-&.U`TQF-cf;I3-gP=:_T/_&(L-[gPc6BjLSr.BQH_kR0#\Gn=/_N_Oa_1KWF3'$pc^`a!Pj"$(U%?1cUh3EcGk<,2ilGl^Sm>E5(`r,;K9?Jhk%m.'!#V^:tijT:gH-i>7FY0;(Y.)0*V<qhO2dUZ/IQed5'\jd&h17,U;KAP0f[^-F[%YLhT@47ID?.u,GoR+?RkAfeh4peU=-p#"%'L*5EklV));n^h0W>`$8e/Y,>fr75#SoKe,V003l)DW`10-@`jq%a[as/[QAqg=_KP%71C%2%1eZu;[SS"dtd\O6VOaCVq/K)fN_]7B09;\,9Ao#N*B0Zs,Jf`pk;.^_%::0,dr>Q,Z"[EFe_3?ob$-@Il$_=B/Z6<et(?9%dSh&LiAj+8oB[%.qD7RmB9USFi$VApV6f#RHF(HRT?VO5f7JaU0q9fk^kc+W#hUcm/*(9/?cS_f!5mTPF1CB`%kuW?`@+c8*fma)%4SXU9o)tJom@P9+&AI.5q=asj@?-fC+/$S6]@lo$@J2j,jo_sEjEmGJ3?E-F#]nZeGR=.05I1-c5Glg!"aYoT"GN</:kT>UnIL5G%-tH!WOq*k;-I-?=k/JM<irOW,5h"WQJGIUjnO8iBd+W_!+WK%sRs^1?].o_%J1UUOSef[=R$947.\.I0X+:Qd>3VL*g_#4f`jFp)%<-flcQNpjoa!>k]n4O[kPk69Q]7QAkLholEOp#3B]Htcrpi#\g@"n`\JaXn7+is=HD[LF0#W2r`M$f[(Y0cle$Z4-mBIfenpmGe?%[?"33`NKY>r^0eq"=kVWcb3o1*KH6gP$f=c&s'j++1<$eaVn00Zab$.B;W$&R&k-HpG[m;qJ4MH%+JG[_113(*XDYcDJg5[6R6g4%Eq[;fI,1rf:LaVl82Cb]]1HVcr;muA^?oO:2'Y\8J>hlH!Z^KP)0BJ&ql8-61OTP80*OtqCnGo0;l5E4RPq5.<n=;R8s!`gkKnD`%=P3MOM3ho`Z7WcOCsB?B+Ip]uh0*L]l%$?MK53&k#kTmU5RXa>S&p%:_d^UFJ\e$$TQ@`gcFRr^+h*qh:A[>4E..L8VmH0!Z[(X;%U4Ya]:_aVIG'CCL`sLtbkNG$6/:5k-DJL:J/sf&Z#qR.9.KFO?@n7A4O>3'j#_U.u==9+KGeTnPB.6CUW3A>2'VI2u)""pVY\WVR%,^>PtgD.q))\YgH)3iueZNC/NdJF"_9_tu(*1:rS&BLrb,,33Dp>mYl8lc)<_A`@0lJS;:3SU0B45J"pZMhZo*t**rTLtcoBEnR$%\[#I[bO'(-QC^>Q'kJ2Kr1Ee$!KTAdMX*iX[iM\>i_-H+*N%G<)T3NOMgG'9P?EAuO>-e1'`GB:ZXVP8I_FC@s6?[E2k[E8<@.)0%=,1.0gqHYM\)9+[MoeHZfDeb6F=10*O9ULC6j+QA'Y$>\`4aL8UrUc#Z!=6$/=t`-'If2HrOHo2ca<TtcCWOU]qKS>FMK4?@=6mr%r8/d`dD$*J3pQPpF"s+i%qe!(>tt$bj2:)XK>KS.P(MsQb)ZLA\H#n6Mbs6L5tX)R^]04on\6UZS(XV3^KhW\_BCSo-Nfl+Y;Y#&%?nrW>OY4B2^T3%(iV/(Y5tZ'%Io#pqZ&rb**WOqu1#%Hq]h//W18-r4p10ORd@f?,r\:3Mrp@hs@ADO5]#uZb"JrqRbNtT6RFV9u%rrpCaCVA?]DVZ8i/ae,EqLae([o&M'[[fTA6`8oU3>%<F/q[\f]0r4G8iB8X9<WtNTsMupH[t!]I@o3NVb147pFInCSJ_bb`I5]G%WlS%(U[Dc$#kO/(8$9?AbjqsRHA,7m)snGfZcUAF>9XUN+7je4Jk9hQdr")'QFlO#Z5Arfg\#SJ0\CY4pkQiD:'S@aQOjaWR_6u6%Ahu%c<$/2#J-A&H0dfAW,;JOB:83%5)YCJ][CP%[FV[,h`B[;oQL"OC^V=)ehpZTrGta)o;q]<o\ZA([b+-+7Gs"3m=#D0mH<'do%lQF'he0cXphp8Uom4Ds!a!h`gGpePiB/Yq]^g=e$BX$nU7QTHce&eTt1n?Za;-OQ]<gs,Y_qGrV>X":HRXIE`/q9(36\P+AT6*JJ%;%Li&gAWm$"GBuWAgq7@.SV8M2;_Uh;OfCI/-VFs:DR&EQCA2i-n:\mU0Rn\L;qNT*fm.[BVnq[HkD9K-n(Q*P>Co&),Wq]77!(B%B6ramSc/a<?dSl[-8R9t5YJE6bY'6M)mlN%?G[Rdq+LQ0?jLV2##&ZP,4,&('M:*^Qu7Y8`H4>/>0L4Ij>oUBXB'*iP:TRt1t8GL%m*W)p4ioeZnpVcI*?Dgkkp6g;m$Y[$B%Anbs-PV.a^7U$[A4VP0,RSRBo&>h'D5+07$PcF45gV^_jX#GgHNF+g,k)![1HR:^!$)i%X,/snk:_r`;sq$o04;T3dd?dq#3NGEC=`9Wc7)GZhI<6K;WtHXbkQ$47BRWTVqqm:!S6K;*mC:\e#0Z]Y1-;i0"0X99X5q$I5\\i%2_2Yk8/q"+bgoGiQ]8I96)(@3AMG$E[NG^ASU/Ju(8pFTqTMK@:-.,mI3S!d)0`m?%Km6>fF,5\Mnqlc!6)YN=a;;'P7k-o&+U4\%&Vgk><H"kc@A>Q"gnDL3Zl^2!%'OFS0XqNVNnpFB80QpJS]-38JQI#gE%a@+gma39LV;huopXbB>qfgI`V%KJp=HcojjRZ;MpfTN%^oZ,1iIhjr8pMh(8Hoh\2N\t&dXholjT&L-M>c7_^Y-mlK7]X9cHXf]-@1[=0<C:uG?0,[\_4hR;QIN?i68LsDieBbRl<WG\j8mr%\&N`33NX$T"LNNY"WJ3aWnL^T09al3[@PM"E&6/3FW8N8.Ji9,_.GH+L^o(dE?+GkGM/L@(.?qT`57uA3h,PJ47?kH*7U8<Z^1Dc%C'G[M0=WH8FKe4:<Rd6,n%5N9J=V0\bq(L!a=HW@+93F;TL?iDp&AS@7&:\0-H*,fr!:)Xelh87)f._J*s(-N_#bnuN(FRjTWnb/%lY5E#=L@I+bB&3#$7bU0l3]k;I!DVTW/Ncp@j_i\l#^-fc49,"+6\5J\$Oq)&6J@35b:@^_E_a?8Jp['QFOMP]u>k\<p`*>XJ[!d%ecn2,=<$HS_V.7n1"M5UN+@s\boj@ZV9khQEm/caX7^GBck:QhQd(X&fk@\qpfrHRe=lFH.^%!!Y**``WRQ!"7!TsUMpYg7ECrQm%+-Vl:EJGePYNS;.?5"9SD`6l*A+tXJ3;2Ka1_N6ONm$g7+?ldGkAZShG>T,GPbiZmr&&^%F$EgP#"`M58LK\0J)&@^40/K+hES2b%K^c0UEc(72RqO'h!"Rqa4"KG1ggm'D8X*dPE1$6J-uY&[gQ7jm#ZR+r#oCbK-sS3soQ&@"B'$`;&1>AP617MQ+8q&#ST3$s&i&nb%[,/\H?>7X/#%*S@57-ji\$KWQY;BV89kbPk:Ha!+(j$YA?]4JO;?2GHZDtj(L<lJ5*f+gZ^o$h`3Kr/1GX^""E3GP3B:<$Xk9/H-%0A"[QVThtdm7#(nW4nYIZ_+79Q?Z=HcsY2?j^Qm^_cqc#@!.?j"fm=ZMKV>aEb>.AJiQ>SX%ef6-'raN[RU,r$P;CBXX.%@mgFAU%]pW5OreMou]^#hnJLO2[4SUkckGrDtQ/=`8VQAcS7[QBt7=dSTe&:\q4&=PQnqh+p>$XqdO2qK'c]8C-TVU(*I#;-LacTcmC^8M\%DVeZ@-8T.W=AJO%"rf7`*N@H:,snW,UZhNAT_/>beVB&TFmo.AJdQ7p5%6KN">)*P0J4%@WuPd%N?F%6,fNSqm]6VrMTQDc?c$L,%2?W<`<CN<b4l)d,:G`XcPP$itU9\Nd_L/<%ijT1N_ChuE%RWYHL=F_iYIcEm)A&(E+SOAS-%JF8%<V7@V:TQsd0E`T41(<srnB[c%]TgXH]$s9lk\g02@4r7=Z)=KKS4lZic(`@Qp<[8D@-,q]@"s;\LTNN5o;''B-)"4/R]KGY!5KAL?S.#N?qV0\%_N8YJhpl>Nkt`N%UN1[:\'/Zge@]3S&n(]c4BRt0S\G^>3X`8R5XKA#\[+THCa!mIa&cJjbol<X,lB.rp1LolYJ>iLK0qY,66A<H")cVV/C:Q1BHXc%%#30&r!;bjF&qT6UbS.Y.hD*>;Io$^o/0HVOj/d-A]eMkBIZ_IW8c]>Vg&`\0"72=@@JIsa]N\',SZUMJ.I+#_.m_3BW!_pN;k)oZ%6^H:)R@"I4hmLBUDraCg*gU)QR<^&1)GEl8i&1>!^:t0`1BW:SH5O.B?[oRpDn!0E:;d%g^Fjk2M0482NfFm@LRc>#\"tGmn)fM1%'sdIC1f;H:*s6`7d\lIeZ/5.?\LdCj[ZZ3W,sc?&5FIY'\4YP`]Zrph^"O_i7ET8K->lGA2:q)$Ri3$598QbYn=#s(`d8T,f/D>%%Wmkt(GbIgV)@aCC\!`kl<8cTm:<o3&%E.SeYq&RVmW+`2eQ_<OApZ=:1IL/qWsJ&A'H)YjcQAe$C>)ln+&q#KqNZk2F'jdf`]JBU%gt#cVT'm1a<_TUM2]0`^nEVZjRO)R*kV+mNVT5BS;F6E4lV*?jr?but[PnC#TY*k*7]e!7])Kt0p[9[_:\a*&q<GLq0K:mMrLM%K%q6@PXfj=1$SfS-j2mK1/J*fik\\DF,[&oWe%sH6CrS_dEe*D.Rkh!b<*L=^ha<]a1K[u?fn*$S?cqhofG;de$osm_]?E\hjrf4qA%_q8n5dPpj&6up\]c!@f>2nmZ:o6(`Rq)1TiEo">T?.14D6gSA*2K^-Ha>O=;q2'QBP4j$+IEBN6]>m'*bsI[U1P9;]RRl>V0&Nu&%88n[sErSF4`^B!%b8%)P5GD-OndC)00<?k$3:4@H9CbB`dE`1gVg)tATKOiAf)$bFr47:"pc>\GSAk087\e>o5mp&r>te:nHZ:.C%^KpA7N;XK<b8-N6Bm99?!CerGHXPY6iJP[^DCT]d\n0j5h8X@/5>NlDP!$S]YFGs*UHka,"-:6aJ,j;uI6jD.!SeHtUbZd\C(U*N%!<#[moTIbKO"3$Y'n<Q\NpS;bGAGNeMR?;SQIDg*B)"F_:&KH/7j`"$d&aYn@_U=ipM?=@ePh#gZCK,9]X?4P+51opS6JLoo[$/2%!TW(2cqAj;N#-sASJRLOP-^P!3;Q'u2B8D.hM9Y=Y.W)`]6`Y,R8BC`G7ljbm7">WYhe\B9h&7t*Opf:X=YEj=-/qmH>Bfuhttt:%oc:Zf&@p,?+1"6!4-n%iG<"E]e2#I8YEb?Xie?J0K&N63nRdQU"EP1(l(O>;[NA&a0eq;Fju[2t(;39`<dgkc=03<lLm/nOmNjX0%frnJ;oU()qAmH^$:>f(_JE@JYR+H-rEG,E,C46Uj]6'i=j6S+7e#U/-6grNoHjqQZ=^;++,+nP<]+LkcM+e/n[)nc<55&9T@H*DC%WmmOg@>fJiqW43?+UCf.,,fnIEM%<\Q(4U)]?+W9n!#>os7Vh]_Rs8W]jWO_$&2?bVd.7La%I35DEMUPpUtUEI^]3#C::&oPLX[5%$:#;24FgG_]mQPpf:L>Znmseh_/!E0.G@c?1YU9>);5ES@(RC7=tj0!'K?g;!u/MMr`ioSgHZ,F44=Xthi]j4D^4XnSU@DcbecS#%:CM"q_%=C1_Xljk&PGjcX%=q0-g`,6rr1pDLhQq!7&6nUU:\V&Dh$XI9-\cjS8@);7Y'@RFmjVNgN@SP)1olr>m=6gDYB3?rI.;D%:F"!M7')LD6C7.%BS"TSML=<hPHVT55^8/JK-#Z"H",Tf?8JW.Q;:jDG#qEl6D7lOP'GW.,`&1CSqV[j.ABB,PK^4ck%t6M2<*!6%8Vl-B;$t&=UPO8?fGBJ>;4;k%#C\ZW($6P1D/K=X%KgO4K78"tnEVI>FC@87Qr/,#:a[t;4N]c2#9cF*J)atkc`l%U-m@Y*'Yja/%_FtV16qB=9Y=olC%*o9AK&2fWLdtT3BIUsL#2nINI,'S8Ib9rrd&D0ns*Q*2Ur:1*>7$=IZ"FXT(j`pNSiA.#Ud/'"7Cl=<97,kh%aHhB!KsKc"@KE3>pQ%:(-ODf#I_q]c^L5>Q,OaZc1)D0.JnMmsiZPO&-%@,I5jP/](`I5\DCLET-*YNUZ1%iPMA!1]\RJ0Mj:KQR%F]Kb;jpf_.=T\..PKt0(@E7Co8?ia5.5Te@\7AD=Nu>;:a7:FUQ?6+Eg*)8GGG'VPW3?>[?:+c:Al:b@&$mnPq4XV8jVLV]"uA,f%a7t?)hI4?APWjs6nWL-*`>$4QN5g%fAaUA+&=NeZ;qn5"olDI\p#70^YRRVjkmo5J_2'?Q?n4aDh"P;7R^4ue@)[pf2]Ch[^#o_b%Qcq;VG$,c\-`qP9gRJ1K1T!k,:'A$@ol*CeG.?CJ3!6FQ1n_[@Ak!i^*TQurmN%pONKZb7`+>Z\ZU`I(h91/B=StmM-^8?VOtV_e%3Utg,GJSp&-0D"F'GlcMU//_/*V4[AQL^rf$c`JTU%MEokH=YZ[%$WBi^P]R*G#H#CdIQmOJh`TM[4uE]s,h%=VSH(SHoKq;/@2>%jd&9R4kg(c#f(5IV=3s91PtT&:C4],i;4t>M1O"VGtKFg-O)mNf'D?Ve:XX<KZoV3[l"mEPjlo/0!K+fZVF['W:>tdDQH)N!S%-V%OTc5j\Tk.DR45"H)[tZgVOeGCcIB2nCQ%"WiZV*P'^-g&753K:l(U+XrtFZ'A:qr)&WS/eE`!+mB;K@K>UolfK6/lm.3P?#<&!s'%e$P;TJ:)*$O$9fBDmB`Ls$!00E[F#Y%R@[u@jn>(K4"%`IWa%t6sM[%-Rm]28rs[l0cDC2I%;QgnFl(4m(M2>WC4uD@3a=&Era.I%#'>HGl@!uH*e.@fJ8i-FXo=Y'VX"E=:JDp:&;X;?!FA$c-no>2VUV_:Gec*s&adnW"BqZ-8W6?@Ej=u/Q\Q3r[D&/t\a3c1;Ft"9%o.\'bmOR0b37KHAUn0)n$KYsHT3+L*9l'=ql*ZO\D=56pO.W9=nsThYGMNU'>'XcV9mNt/NQb"kD!Z5(CpNU_R7jX5j'!T%pi_Dt%\0:9X^/9!=-AIZT]a/e,Pq&R2]+dQBCE&1B%6dt;aA(("5H"d8]os_%`NnpMqVn31F#r(W:fhQHhmiOkYYHj^>h`[)URCrlZ#4?>%G^FU>8&qda#oLFu&*@qqG2>l"'Khe=[I]mHZ$hY;AE-?Z?@F39N(GZk-a0cY7!TV4q=P+e7r@K*+bHL+6G_b;4kWMBPZ@4#JH(`0%:!4XtM"3uBT.OH]3U-4#q/gV2]0scFjU#JTdB%/J`?s8NQLVEYeBddM&N@aXp'Z]*mtaZKE6/qAcdEI#15PuXHhMV%N"3S*#:uDQ%'jk_<I3AXTlN4[=-7^n3;_@p4D7?SgJGdKOpeA0_]Ytf\Hj<iA^9Red,591@N3ZaHqaB_e@#b,9@s?L1QU]m^L#*kPY>X-"oF/_:%fg3&Hm^Bqj\NpR8kfEI&`+Li5O$&'kHODXD!'@jn1(h.!?"`TgPE/\IhXDkaSX!(CV<Z3S]NFc4U"#=nYJmXO@o.&kRJW&.'0.!b%\-m!5fW,YUiTg*dCT`)2h96:Y?E%*&b+3g^47(V1iFO*X&gQ]VGTq0J1VA#S.h!<r,Pn^f\t&ChCu3NBXkKaTU40N+nfsK/M+8>-%>KT7MQO6d,*m#XrKt.0(a&incIDm)Xa.M<E3jCh4JkP9%jtb25;e^!0IR0=BHLnQBpseS.GD;]82e?-YRmG4P`HeiSe*(D,FYDWD%d#:7Gq&7J*jl]jG%JBVW1s@!W?#IHD4H::Lk)O??dnf6)SW#M[h2A]&"5N%r(Kfb:YK/e95nREGn(Yuq`>]p,CZ#Bl/CO0-m^EbN%bXt1;$"b!YF_Sr+?b_rlai.6k(ctPh0&lUu,p#D=Js`^Rm&_Im6Q_^I8$g1Q9kl!J]NNHfp;GYufccoV8;=kT:RPYPgR!=1Cp.FB%N;Tbo<NuA&Ao]ma4+Uj=B&VPlr9'u.4<Scj0B//i/aZVKON98HXX6Dt([O&g1W/Ab=Cam$Yh0^DF6Vc;.$m\f?4'cCjF&fCRjOE4%,b7/VHM,"9Me0=@Cd8Y@?6l7`K2Ei*>.8KXEds<)j`'4e!\UL3NR!c.o;#2lq:Xf`'bBC6?seB?DjpSjq*@ki2^hE#%,CAoSZ!("%3t^g=rNOIi?i$?^o]^!<EmEX9.XdF`UtMjd?<huD<!cTT%b=EBIbW(**jiXA;@`h<EYQ[.9VJlIADH!G2WhNTepnR+^SuK=*o,qF%k6itNds'k%h2lg,Erdf$C/nVQ=C":u7h"Q)$,#/CIHR^m9/3]cCi(uGjk?cNYS"+.,6urWC#m^[422n%D#AmTK+LYn1+lVqWpqkg%W8McfaiCLcE%rOnPCr8Qh`![MS"0Gks+Z-K:S]3RR6dp.6A:t'#QVD@*l$1l#RAs?Dr;AlJ!+@ujbGPeDOQC#=-mB!jP1mQeb=p!%88R)MFM&C1-A.oL1K"qJr[>8i7^SGUWer_!,$.rYHbflEm.!+NLh056?6=6m#0fb\R2jqG7fgaK_eL=\i&q[IkbH<3QF(sT0dN_2%[V+/[NUci*40\r4XtGk?FdIFZVYVXF^#hAC8JG4?>\EdD3HR*q8GQk,L,TTFn%s5EnGXQ)%To:*e1?io_P%+EO\)=mKogA2oYjJQ%1Q8I3R>OoSNs,cNRa"mjZ2e4h0p1/WB"LIT-MHA#Lc"]G3U7+#Y/DX?X<E`[bL/</0)tW*:MIE#Ynl(14N_fTG<p^E,\(!?ZJh.%%gtDHS]TdB.Ho%:"?UNKF6OUViJd:cN)E[9(M[cFpp_5Z*=]a;=!Woem>5dHA+GRic(cgbZ)VJZ_a*p\"AiYY!#F>O><L5cm_S>?5%CucNS'N]\R*YFV]BM11Y>Pkb%M'A03hrHO2@i\aU;m&:Td@_`K=X)?4AWu*NArF+34ZWClVk,5No?GN&H9I$D^Gs.Va+*:)MaTW%%XuDGWb?ZmY?&_6!!@ut"k=u&*]d7YSg^VhTe[op8I%iRpNFC$f-7f$f7UEpgIa-se,@L)o?+$l^^GHFH0ca(1n-JCP7Y*c:HVD/b%'<j)6k<_9<B$P42GL90?4l-S-&CN?-!ct^cU]T"oT<?e[lJ^)q\r[t_oIj$oFchJCqcfIt0m:BO(<^%eIk93^c6dGCC>a8iSm;K\%rp>9&J"M>;*NkPYZf%<@$$R;ENMCKU.6dNXm4VBg-&'M/g/m,ueb3lhZ9ln0D.XKX04OA*kCelq3jTA$3Ic+T>`[u9?9dt[M:5%t%*o!nb7HN6GRg<;1nC[h-j=;6sm4Vu-NN]Kg*[/'3mIttX.+N<<;DShdbr=Ju$Wra49$$-L?(P6U?1.T*2b'\sCcF?D/DSbU?3p(1%'Bl4Jb\@Q7Si9dHRQ\4FN]+OfP<`q]F)1qIB.P<9leoFaG!Nj?("Ct/:3aqNfNYXb$WRAa7Abp6'$Pb&-:q>a.Y#3aM-:L\,S>B,%M/o>X==IIURW2)M]pQE79I7UEHN`e`!cu2`au`"+Piig;p$f9F9Vm'WEj:/'91M]E#>0Tro*#td_8f:5D>=:]X"X?[c"/-C8[d.d%f0J;>RL7lcl!!oCLXe)TgnuXgS7?oPbk>^?0_OXK9L=[7B,?HDjk8j1YksJA)mJqaHe-XSO&CNf^IP[-PEpQ[XCa@cqR>+f]7nni%%`)/(P`EdOESc;[FJI=>bh&Y9.:P+T%M%g@k02@@pn-$q7,O3=T;CFU-D-s&5;.*O@O_fP;L*I>7Iul,_.d439MkX)b]^&?TV*/K%,JPJDU!UgdCG&!F*l0iO'I3L3^,5!cc$$gNgr[O+V3:_aIo/`R4u3_8+X*N!_/?`"m`U;#3ngNT@4m0PlQQD2Z.e2g(r>KiS*,;&%5/k'Y3dUU5k\*gIdWT1D>nN/ZQQ'J6]#j[*"TVQ7?<p!7foN2TkRD!3^oW(Wo%mEQ3pphsNrKdU9>%(`hD4ld?ar]T,lNmc\<h/>%q.@C;9=T%0qSdr+)NqW;!.AmAHY1-m,fM?m-gb1/?tL=e.t>Trrq1%.ru$k3Y'u$/r`%Ml#0*%Fj%L+m6.'J%p)q%Ta#f4WXT$[C%I6TnCPMh\9Z>\ucL9H\d7lqmuqC\>>h?=f(h_qoo[iaa#iOb7rh2SoCTI&tR#@c"VFKD/$,7)=i(nKSeVhb(D9=!?Qf"dIVr%Lop%Y0ppqVD]HQleVPJETM]1(42\CR]I:NlWr?+$$ur9Hi-gMGZ)cdiO`s\q,*^cRt1A>rCW3tjC_A)\p-O\bEjeJg#<ec=VlndI%,)H%]"9N#THQN%Z8FFIb\f?3p#dl2,^b/EAn2M+E8K=<-_B^KG`>sa-@YhYO4R`QB>WsfKm.39ns8UWL>"cL@I^"AjicsVD:$l1X$(o3%)>*Vaq!2/sZ9aV&N.u2smhIsd_OuV+=kEDN4D;t0Z+6qp/'<K.hqI);oZ%&%'FJo(h=Lb'PsOZXbPM*7:jLDQo:<t!kd##$(^1Fs%Oo#Gl/c7OBV*TsnYZFXAoU6+DZYG-dM0sd.KM`HHRes3al"V$Z1pGb><<u+I5q=j_Cealo\o3N4"buAUnXsP0G#^cX?^Wr%Y[`/_%"(-V]\)pO/FB*Q^*L)!sDD&3\MhgC!mB'T$ZCsDE;q?6i9CEpe#2NOe;E<F'XG4QmF@Rq(GND*mNi),S<dR^aoHMlnWX_Y^MU*`5%9'*V3Qe#P(Gc*<1ZVBMHeZ/25q5`99dU6;n"uTOP_rdT/FYs4:Y!!OR];jQ1Bhfj/(QOJ,iSL4nSU5u)g2iICPL\#P51e6]dhb)Z%dpn`h1_fS.hj"EU]VgS6r&H#2MU,Dr_qnbe_PLitX>jm=2CPL6>4hfsga[r*J;6P*Q@=&#F"R5mV-NH6U,ZiZIWDVQkj'I!r>#S@%*g7#%+mMHGU-*,2F'7n>SMuFYem#U&eNlp\\p_q3WQk*uGk9^e<!LUYh@edi>&ho5GI8_*$L8lVp?//R8uW6q8J>I%DjU$f:US;$%C41+Q%1;FLC,O_FF'T:Dlm&o(+,TH&.AK"=Y!u_S[a4\m:uGlP<a%_50%iP&IYUU1>S1W"cOAO<f]K#r-G&(0df^T=/K<2Mh-?1_%mD#c>,6>^=Y2trr\nnt26)P<mCf'Hej'mfLV,C%Y?E,&QM!WS\*Y%C#4=4-`:EIg0Uponpc";I<bb01RXBRGnE,=jP=InNfMPc<K%TI)0eK`fqDpuqkile<MG[U.`I$O%C>_'0iJ6D_h7G0oHZ=#SO"j_]0u#;oZ_GI:=?8miM3B=u1FNV1L`cIR/VTq[IJb1#1S`S[;k%A5@J$(3"fN`.J0R[f_XJ0Z2p=jXGEjfiU8X4P_g:mgpKOV1bJXchA1Pq]/O[\I5?!9bO:OO]Hgt-6=aW@JnVc<Ht)]b.[Zg[C=o/%CO3QlH2?JH?L*pnfi*H2+'t\1GdONb*@,Bc?a'%LR"\Z2/0X`O^7Hgi..s%jQ?b)![(s]a;'1)Oe=Mt^\#W%tmHG;S7VC0i`V,p*%M"f*>QeL1Y`)l!TWUf[;7""qAh6Np[`BGM7X*3N)HTOO#l#oJVBmWR#S].8Edghg>jI:HpH/?4[;qJ.Ag='-/pjDV)o!GkOT;L++%Q"#.Hg&*:*/&**@/ZLb7mCVpfC/_Ci*"U\sZ9omI01[N]D3>ZQ+VA@YbB4o7SQTEQLEGWU!QV)g7ZF"iSpmALp!*D'oK;M\^'$@n%X(SN]i[]Ajl:NWe:Q5")hla&Tcn,&S8?%>Ulh)94KeUpZRNFl=:c%^7CK<7[fpERZM-N+'mA88\?dT$1^96*)^TB;FNLq(a2"IL#%L;Qk8fVtub++iAA4bab27'YLd%Ym-=>_b%OY)ep`a_fW1&pTOmE$nhO.-pO0A\5'h\6u64-rSXU6%`[F2.g!Km62SW*Al,ZW"43:%lhaWd-$%PcZYWJ)NT4H`0eQ6C4)0CsCCH[+6pu\$YHKU56._U)CEp.^IMm\=NH+3;)`0bm%iW'aM['^(?3u7eGMf2t2Q4_I+u&"7%PsHR^K\56^H-ehJ6Zl3Jn!oQnIHb!Vm%?BfMB2P.K+;FER]Kt!H?sJ-%uNI^<Uq>`UocQ=1QIWoX*PY+Za7Zd=?_cam!#5SO,8uF%4Th<&6P'?[$Ib'`(0$.Qhk4M3M`<`+K1OhlO_2/=o9-ui+/<(#g'SIb+Pep'c2[AY%e\NQcq5i`hl[,=QPU^$B*e46QO(:3O=h1U%rt)P@nNU\Iho$#31sH3VA5M'KA,S-"`.pETmH&*uq"*4^rmPS;r,"?S`<e/=rlC2SY>&=[>nOsDX;1bf.->t`1=T`[ISLmk1B7nY%9*crCI*+AhA?=u:@)tFh?3qo9hT&1WSQ(\kBALcr/3TDKbqk9ER,g=Haa&b8LlVLDkD*Pf`VELbqX_W)]Pn`$eJ/3?Rh7K:okX#d%*:cc?-D)@u"dk0SAG$Zo[XL.f-2p=.0i_[s!-97#m,5d[Z[9Es3eamC^4Nm(ac#<'PfIlIAQ"`b@*0.<CBiA(lmj1HE_l?bh(-SI%r9SQ+O!G>CH=tV^nfeX>gqQDQ33Fu;.atQbhTE(UP=hq2nNSSlE7.a;G1k3Q787X"8L5&FlnKEcOi>b*;tH[KW'72;6,e0k?TDRG%77?/2b$99o-9S,?4>.FmDe4dAB)6\nKFl+QGGI.6YH21'`G:mF/m5'1:R*IXlN)ZQX'9:IYc[_'cJ^dOM/JP<3T&X4$#Eu68=[YD%&Mf6"3aM%F8@arDRR7C[HN=-')3M(5HY3Ffn'TBq-+aLgFE5m_/lgD*:<)_.a>7PsI<LDA8[Y2oQoekl;%hpN;RQCm*&1-65?&K.%r2et5Be;p7=&=Q0H::A!_eX*pCK0uBX;W%G=lT#M`dC6aIIhK].Q:"`eJ7O!mB:Fm:NimWKp01tZnBg`7?:Q[?+V`4p%)/J4n>7X%.sZN$\9-3@V(,*Sd`L&N`Q3oe35*a^/1qC8+*-RIqdNq:[>@<\3pi@c.(io4#dBperG]CdD7L0NC/@ZnjO!VT3#fgn]t-Q[2N6AI%cUKXW7QYFLCgN%C_eeAJ8FoIU=";a6ajna8hXRNeR!DGfWJ;,/#.f>.B*nk!lPC;89Jr[`B9C=<g-I0&o%79AlqjO=s6?I`;Uqco%6e"+=lr3PO9NIf]gM8cN:n*BO;D;5_TRm_0*jmC=@^7bf+?aZN9b8M5.O&?Z;MQS[@P<cNUVDD3P'VQ2pdWfj.7],;92eB$A+j?g%n6hK"3a;*<IdTK0FL&mk:e>Cu?^la3W?Lh@PgkJWJGe3g\K)<IE:-%-WU8eM'Ylk8(Jk.q:]N`SWX;!ChH-9*en$p2@lmZW$h/_E%YHZ?\.\?R/4gQH*WLk0j>Fru:@s*@@P%`PWHrOQqLjAQ`^P<I1:K"h]_@Z#u&_A.k+Q3+)Eh?H3&bcVVc=&MYO:&L)WaQCY0);]F%(DlocP%u[;U<NT-#E:_3OHf)P=hHYY+jj*-_UM,GlI8L.g#Q,1k.dru+-0*6Yh;nR<TKK+2=L,:UXYW&'>bKFH`Nu(+h:<)R.la4%fH'dlPA9_7nihj\6+pNq>STdRH7=!do/1Pg_!!LEY!M>HhaK&"R4I[>X'#lW'1K(2Wk>Ej-g/\R)q)m^8el`4)T&6($n?4Lae0e^%'r?ZS3-i'8h)^L0,um@o`_Wtb@lS$-0"D-i^;D<Dk%)ClJQ!:KER3?qm)q\JOVp2K"X*>HH1,473`9<cKfXs9=W?M.9:P,Z"oLt[%Rp@DtD(L?W]])&B,iUm0M4^uq%9P\EF/>)(6GO#l>F!tRWSIeeV[+B^M]ajP+e>^VX(^$'p4G>2Ub-.sS>SshL;Ib6$G#\:iOB>)%@kn&)F'.j;_<s%$*s;,+!)/gsG;s.4-J"KBWbdaTp`0P=V-n1okk1UY$fRqel(b]-VrC)e!`J;F;9J=i^.&c-V%#bXTL5U(TIm2-%a;q)(R!#C!@E0,<8l^itA?H>Qi"<2G24BDN6,:d=d5Fr').Xh+`#I)lHEt;8qV`9-nB'W.,<A47)g17NGjcBbnYq99^@BWobONrN%0-EC[cRtVY,=s6=3qN_bMMR&?K3kXXTSUY!QQ&Gs7M\=?"#^T!majMV\@uV,W#JaBk_u7-R]ROulEunYTT]tlP>=F(Rk(=;RbrHL%.*cMVUkbCt.#!'j6ZA'-mH%/T4!R850c3_C)%q'OHKX=q>]P\f@pirm<SP=Uk$9`HLejq8jAF0Arr&=d/Nb086S[/SfdqTm8danf%s'>m:gHnaIp*`BT0B>-[UT@S\ipeR#%,_tB?M1Q`_[.LqkL`1n-kaR>a<Rg\_Ld%io>ubl_l2D)B+(JXd5"7:71Ze\JB5d^^sOTp%<I>?FFoG7M4<RWIV'(lb]5J63S1.O!61M7_WVMNEGC+2Bdkr"?gk]G3.D_jJP@6'/`ZnIu`S=9^?&MKGkoZgeZ<,j)7m'+K@DFQo%WCG>]1JE-C-hR#PWeRLP'r2^-\L*1-!OK%G,$I<*"2^>sqTj<<('-4#>$1Zr]mGB^S]&HEMD[&i%rj>bV\$ft\UXBT@o$>ufXi*)%_ma*8&5Z9\9u'<e-&)ppX")E3&\_LSOe(/_@(sl`*p72/:-3OMhdpkkX$eI>NE<EqL/,@4%bm=+eBho2d,>i;$oN.\'m(YsE`*@;%9='51Y807*L5m?TZ%>a''0iUR::l*Q>V11m%@udW\:RJ`>4B<G3pd88EOF^R20@PpCnb+\PA9<g/*N?kr:Cmgm0Ynn%*9)=FP7IO%OtTY2*(\X/H^!Lo<.\Gu)0kgHTO65/^aMf7H3L,:%W4K`%@%/j;b[*<(Ht;HSB:fP87PkH3pC:'/%1)UP,g5V:,-IS;_grmRA&M&%B80u)#e;dL_$lmT'@BA[8fGGE0KnPT4?miA*$b@O)&f'<;:a7!I$AR3*/,#0q5BXjd\)edOu^3s9#_^VQ.8&*@PX+r!T_G(!On2d%+<h=SHZIhBR$oS#<BI%S1UYQPK8tO3SV0DMDCUE-%Ok(V$)2WcVABuZ),>FM-qV,):#4tk\D[Eu5t=4?:IHT9+r\8(lEe8Ff)[5!%BBW5dR1l9d.Q4;j]@9SOHF8?2EJt;s[1++LA2^)d>/sce1A*$"@L'sI-jN<]8<_+iWb<XfOf.N2VFg?70Nf]Gip[thIU9pt)63fP%ea[MLg^1l@I'&sb)0k1a?u!Cl:FrF9%(nW!"4\T__b(<EcbPlS'M:44f2)DT]^\$Hlf%0->/r#6@%P4DFg($8bg_0Bn!N]Zi/Iif%WOFmH@d:QA#NJ7DP@FO?-mh[d1*;mJ*3C:t[!d(\;$X_+?aRu_qn@bsns6l[E`sSf!*T_bWI2Y4:$P@FW,R!cVm\+e^!l'Kc?E;i%&)4^3]e?kYJr"=NSPQ$Mlc`9q<\pIO.VEFKA32#.p4[^)<(l"g`H@diHW=d7o*]:AU/XB&4kD&9E2oK;RS_q(Ck+&q/j%3oc`H5.%Z!X!Jp4+hqQ'9%+*gF)e;BD`:0dP:1l4m0B/r!eam-"@=M;S'JJ51-94d&Rg'1A)%#pQ-ddS92O=?u6^4BEJ737FOO;KKhEM]K[$%MC<0Go=bsg5jG#$N9]YLBj'6-FHU6HDRVr%L?C;^5rYYsP*).s-tQp!4Jh2TMV>6Dcc@N+JU]X`7V;X=L(cs/[=I'uik]0U.760W%,D0#:mI?`lL(BQCaZ%%IS7=<nGj+,IN"""IU\_VjbB$X^UK!bY^r_=kn+l[Jj],/YLT2'Y)0(t#8"O1VC7+4kDG&J^T]*YdKl$%"%R"LP_7AD5C9ifLo1rhW!a!u/0I6"U9:A;A/-:;ouVq+,mmu:N\*BDLlN(+,1W)?atJ-[X-;br![82'.1b)Yb<NjQoP;P?g?),q'9%/:M"Xi_E.)n(5H+jS97WWA@ikVuQ_#F4A+$F0PNVEJL/_eZOZ`IR<^lH8tH*5+s1gh">X,<XTsL&''1M>T)1^lJWRC-Ei4eG<O`1%%eaQH:SSt+rfmJgm5eT;*4#I12#p.s_o[+N2<r.U[OTA2q=Nsk%%i@Z?olHJ,U];^R7I=T^8#bbl#^S/eaQ'ne/5<"p`uY!*9GLM%*43VAiCH09I-dq:-iTo6Y*rtX/3<s;HfA3*)o)[#$2ApZ?4=04EMm%MZ_(rK!pUc>i$/V3Lss=^BN+nBMYN+Y`fDJ$ILSl/7$";g%9t'<*Mag<5d(tI#]l@",G`Js.@lO^NTi1N?iLDNTFk'UjTPrXo3(Bpcjc7$KL8jWi@Rfg%;d-(<@"&Hl!'mT"8:=#oN@L#r2Q,lG%[rYTG^7DSSp$E_6WLpq<WCS<g4D1Wa"ZU.n84?A#;3?aoS>.8CeZTkf%(('JRO"ea"@V:FWVS!.jC6bJbCgFfdU&P9$rosZ(d3%U%[EbJBE7feCaUauH'TT$Bfa;#M9Atim/Ys.CXGTOnXup2CS@[N@B.4h+qmrrhae`r'Wr^gK."'H^%(3eTY@s&fncKNFe^\Z'S6kFS%@n$uT+^i(MgHVEkU4EG&!k'uE-Q;PaRduLJ+1\qtPd#;a2>s^mBmlNgWH+Vcal>?IG,eIK.G;2E%lqpM'(1Vj>kSm2[YM_EXQtWp%aL&]eL!\Z6Y86Vo9'E;E[`)C^+YE-+bF?IVDnT?0m=*UFX<qYF(&b;.SnX+\fFAP.`\bW&UYFm0N&$`>Oqt[_26Mk<p^$*j<Cu$"%`cea(hq9J2G-cCr?D]3kDN7Mp$G24$b9L=s=g;1g/uoCQ?V8J8j:uhibmM(q-)a!U\lP:B<*kKZ<-9OfZ22ls!IISSL^'+Z]:l:&%<<`nmSV];g9!,r_ctmG3]8[*H6&FAu6*%lJ3q_%8C4g[d#0dfYeNqfVdDMeMKq7>sP-1e6&mF'o1VLPhXXS=/gk-3S^URI[?!l/]%\R5/Q@%\T_gTSR]ch4G([>IX*Re**qapB]5la@2`Pc[I,$EE`Zgr_b3b4T#J6\M9k.R-pV:b%5Rm9-EcSKrOtU?&0I4]VmV:GjYs%Ui:XaEij[YMm6/7_>@4qF*7+LE_;@ckr^oH)9p#uC_u9.PL<ON2:(q9HAS/((@LrjjG_BFq9kDV2$:k]VgeMpkc<j#Lou*NLa#H<%=Tnp%`u.CH'_mp\nJOCUHL(fWdS0*iWp'rR@8<u&j#`06kr=QkYF84#C8S==djZHWm"q@@RSIQ`7OoR?=4=.@Zp/1\SJ#(EDZ$Td%FS]>M3Cbrt6&U,"24Xjr[['Z9COJT.SPl&u[#`mseT=EkFNS6C:8t*hEXZMlHd5G^Vc6<ep0EC4X6GjJ/*$5nZ^OVq-.]f#Z'nFe%Q;6q6c;dT:jIG4'moc^UPYXZ;]:)J$e1j%tg=::;TX=#8O/]!TVq=#1l-;jTokHNT'K`jo:2(Y9nI5=eeT=EkFSKCu=f^eOC?\^4%fl_BoSPh&1IXU=OeT=C`fH"95&B@c!.Fll2h"c1_24]n'UTn0OA2Tp:(jP)jfN2`ca^Hk'<;sb.F@(a_e#Ar,5Y,l<i:-hUF<_:r%;/ME]`80s;FHQW#Om\Ag=6bK87VcpBZ8nG!EPD>8[(VB=h,gMMQuPSmKha\<<pJ+iUXIe->`WSp:&>u8PP#K_FKVWB77lH]3NYqf%%m_Y;mu89^PO@hE1(C"0'RbYWPf?';X8aY)ogpC&#C/_EJ,[M[AkokumZc0s`ilod3*G:9]7\BRC1nIOMscO!:%ar:l2?lnKlgu&%HFEZ=G6^i5l'a[[D5gTFGka.?HPo8KMsds5Tbt<%:5>#BSO1i@k"`2Tc-YSbfS)tnbb4s+X5_gt/654/@*`m^$)Vm#>+VI^ZPY1i%a]CVqT.Phj4d>OcXL[>IAoV'iXH;k;ZbJ8"M/)8(%riH$[njagc.F0p7%KE:kuGB)8p8+<I6UOtQ$<NN3fSPBPaXg0@9;C]>c4:"%c[W+H:q6B%A0(i!T-/MJIA(I%6l`r]#Y2A$<e-oJr<.)"]A%H=$HV*BmR]63a_ikYg^F3FWj%eqaR[4%T7MEoYkD_&Z^7JY>E`#M%!\d!UOHHiPT7Kpi<^GVdWKQgp@=XU5qd)/+:tPHNFA\P,$#3$WY$/sj5<3ahAP2?;'q;UPhI'GIW/s=2VS!QpWoiUT?0ise__G!/%TXS.M^cD?D!=YJsDl[J&V,P!0$\)$oGUW_>+9r]<B^YAAn$Og'cus@OKCVa<_B!iu'm=R`W-0B%\/6-piQgZ#eYh5B-a%hZ>n#8$%\3&iM]Yj&l<,Ti?7m3bSrfsg"i>B8e:+nPTSf@)CpUr'3EHgJ0$g$ZO1FrZSTiEmh?stX4@AjrBlK0LEG8('>q3H+jmD7=U.N`d@%CCP[S$H"kaS(5;ojV\D@hm<nTM./2f3/6_QPu:e[F6!1]4fTm`O!nI(7r+KU?/dUdgMK[>J/KnIC9KM\/%*NePUjUmMjQoi:=h"+%ZJB\(0*fr4g\98&J;k!X(Go+0A@nBNP"GhCE&A'BmRH6Zp=dkr7[5/E/jG).:GbnfABZb2Pbe+.=]XMN)V=E6N[o"23eg76D),/P%RVMJ=C0VsdE7MG=C%&=im$.FQmcJ?;4T[$GqH,>EBV`YU].rql.RQBng1rZ2WN&(6]*6s/^R_/ET1r=LVbm&f?fMJA)<;'#G#Z:?%#kAoF4t[PiA(RB\=g+gl'jIF,&8@lm^+/t,@<(tQ&#cQ_NU$9o05k0H.<<B\hR*bTp6VR3D7q*pCU&7ZmpWi$U(MD56@'0s[;,*d%HM?f,0>_eLW0-q9F!ds-m<X?G]>fhO\K=^l:a.iGHBmuellJ(UU"rWd['+T_>O#3FW3eD+ADLLN#P*a3J\^g5X#WCC=Zr9B]a,.i%HV6pe^Ust.6E&H6d?dofF/l';KVr-oLoSmDRt0d/M7i_tXu`Lu?k87IMX\:,Hf*mqGU8jET^,<(DG_G(P5+TI-#5PtYjjpORp?:i%qRo*pl7)2Rg<CGFrTMG^<jkj@kP8,(#0/:PZ"=W6aF#=G:+)BjZ-W/<B5Y30\GJiOFfODae6>r*%Jn.RgO,;kbUU&k8r?1d6_\QN%T)R+e<KooKqj@PI<iK/)jlBe/3VI'NN7K:'Hg+dI?.:W$+.7bA<iI\lnh(D5>,>)]k#;em%]r@P\aNoZmHkTV(AknSc=n:S5L3c9%#IR1ZFAHUBn)2b^9(t<V(.uG]!^b&^3A#ZDj9Jo.4'!mrq_q5?eWn"l0O%]I*4+Tc;mN<KNgBG8S*mDe#A^gf.Jm87a3oiP3&D0H%B@!m,e+=J@;PSAS*1PP@,sR-%e2+OEXn>t8>Qo@e65.lLb0Q(h8JoA<@X:mEG4/XT#CPTf=afP.&TWA>Vb@!Rn[U@`e&e.27dg++%A14F)%G3odI-9M:nAh\*]"?fa/>\Ed)c,.<ZREqV`M_[[r)st`K(5e7hFrlufCI],/0n0bgLPN*(bQ!Aq9HfB2-/O#^2orRgNK91%DVTb$/jX3QH;m*P^;&)m.A0Yt)_C)Mns&urV-@ku>JIRnJ,_?5qKJbR#Guj+N\W#:H=R.P031(50E#&qj1r$G/e=bFmX7-O:e[W,%D6I2HeN4Jq!"/G]Qmt?)O]&7]<;R/^Ypr#6'kSYnmt`GY'udge"*d-rq1'FWe9jo!<IdPS!-N37;kqH#2sRBmMAiMs1g1![=(S.!%Ne;6!;ptT`WrS.1!#gl[eTTiWCB2O8agjV._Llo7b,9P1gK?2k4!4oT_PMY((Cp,O\^N1mPMO=R+1d\4G:2o3Qh"Q[f"(nN/=5oV%S@eP,>frsb>Lo2qj\rb*nt\qSUaQ\\d]A&=HY2cp.h*9OlR,Y>S`ea(b4k`Q>fh-<]m^;&HT:&pU"F_j:-3<.oNjcLWk3>")[][&%Sc3IS"8DX0q)6aep\MidDtV#Ge'E!:TD"C9nVOkVme,%Pf]=K:NkO%?4Pfs?r=n[G53cH=mIO"V-.f-jqIr^LEI-KIGb,j>%,L6I%4X"FXlL]H%Zu>V!TYC!,b<L5UH&d7MPUbLC>Q(?46c\*MVgYW'd8alcV1geA5]slUIbK5b[UNmZf2)9E^VfL";m-?glor-nn+Dl2%OV`KgHQSmX?9`9Tau(E!hs71gX.LPPC#E;^m9BNG.j#;3f2'"@Kg0d$ik9g+>ENUm.dM-E]meZ?Y4;6pc>]tZMXk.nofKi:9kVa8%mRFX+h!:lOd3[?@a5?21U%[?FIRi88B;k5aJ>.?3hs#7oU0IRk^5pU%'<b?Z@JF.n6`4cs^=Q0X<^1Jd;t'AmC>4tX]-F?(F:+e.%gj-;bTgS;Ae%XB$FDj9Yi"O:'n)HK+$tW7gqtNo&6hO[^%_n(nQrmPkonNElr=6Dr:ZYVA`QZjEp\O7n>DR4j;lb:.oNo:roU+Ta%rNtB#L<!'(f2%'d6<&Bs=.@_-ofK\Oor*69Pb8<8X:t'_1Dj<]h8a_c0g(%3](8d-chO0%-]M@/%":9DpKg(Nk,j(^)>JjQoi%l9%;U3.9M0\<uIbNmnnoZsdk"4T65O!CNN79s=hs4o;D^hO8@JBV4hs,DN>cFI-)ObjC^sdosp\JScL*isaCO#WfIbKgUFH>ncHi4XL%.D"&*BkQLoHi:<!\Q<(;[V)@VYFkN6i;Mrpj6lS=U_mGfTXgD2^qG3Nf%d'-'$JlP)S+HqgGk"i3)@*:Dr3M_7/Mq[."eYA[KgRa%F?X/+$u8_4r4>kR7VYs4BcapRPq>V:,?D)i(="@/dXp+E;I6M[QjC2qJ1lK=>V+;S4ZQp:C[FE6]oKj$'#&5L+\@FG?BKYm?Y"+'%<)6M5<@aWJ`VSi1[b(RGMlftr>J.F08_6]72r]_N]JNpEa`L*bZTgVtqr<MG\`.[ba=Sbc,6&YQ&>f9%2GonR7mqV\(_a*6rWp`E%H9\AB[EWqee;<ROW4-Yg`1*ZB-f3Z:#P$?X-ki^`@n<t6r*/18hlm^MO7qc0HCa`22kS9_oo<;,f=Q4Y^9NBpO[JWD7?sE%c_Onr%(S2g<n1Es5mj!b^g=iK1Kl:QPCZRGRE'9dr0.nH_-i<#,B>"gDY05Xn7OI9Y8c^M*pF>\)NL,;IHV<M$<@`&HkX/Qc.FTEFdnmQg%FL+7:V'V$IeI78:J7S*\N2BR1'b(-tG/(t>XQ<QfT0+`7VC(Wc>Q^"@/*=;eLg6sI,'(TX"-G6$br:t@\r/%>/aR`PhlQ-%r:E;M%Ebu2a8UMkjohZT7o1/Su"1L*&"1F><=-?5R^?otbh^Y(`@"#t8fNqc%Z)<,kj0R95`GNV8PmR=aFfcmN5ckP4fCQrp._L0rO7"Qj%Uq^hf5;iiakO0_@[.>5KH()9-PB%h[GssdCj@ssKnW@KcmDM`@ZGqfdb>OC0q";3bRX[/O_sdFT%dOGYoYQODp0U8N>Cs)+IJ?U6%'^b7jT7I[4-odUaL:1G*qU<F_)7=h<T-!^P;S^>k@TQ)2CpUh>DhRT`mtp+Q=kY-ZDf9!U"h#!Yd<N_U4:og]Id7V0kZjs&\HcgZ%IUKJ@7o\ceG/lbWpBg;=mkm^X&'?0tTEP^8SIrU6X]&mHO.9"XKa6gjA7=j&]bfo"G(M1?F9.n)#PGM#fti:W'*%42X'+B,8j\'a%`\&IBjkQem'7B.4$L8>##fE<.94<2UEuC:P;YHg.Z5X`hpp5^k3gmtW<Bg>pa4I:4hQ?qU04U@4W=&q"c3[jajP^@Bk!o0$Kr<fk%).+`q;,VMCYgmd!CuC*3A?Hn.hfonAY"DP=<JkaA;[c\2Pd)lsJ`ZMS#4$L>5=`Td>f&CtB(#Q_-'^1!#0Ck*($/jZDX/of0APG`%N`l7BA[H%s^_<CdB!cI/K8AUnnqIqLB?eI(5ds%@h9rt=IXR<:pZq.RW-IBp>,&QL4+@*sTJ#!"<$c&=jXa0q4$c=W=4*qnbp;&G%?N4L&Vmi_j6S:Cbbdft*n^t=I<Q!EciBM7E:ZY!i?Hbp,T`@^>A50-FeTc*p/j%aRJ:=5VeP,WplMu!fZhHYsX>n[Q7*b%9HW*l?%b9Af:bc9pL&+.QqhnSQ!(:W,>9UD2bK?7jkqjVt937>A0YQu")&\GB-a;1d?IoKq6p\HjH+4bJsd:d#u#u&*hZb>;+6h./*c]IB[%M)UIEb^PC')s:[')Q0_%?04:/BOiam]57<os3c^PQ'_42>O(`%jd</#@#*u5.SG#e2t*S34?ol*5!elM[&&\')@%&"FPt]hWkr<!%L'<a:-SeQCdPdt][`#u^U])SVQ"s_)D)dO:7;!<3'Z%q10]9a94s3u7oOlZBK'.Z+Bu02Zef+e2EhDhjSNq$u*!`/n3F9r"AA7.o%k@"]]RI=tO^#oHJrFA)8Gg/B"g<oHE?d_Y"^,`T-FCH:9h.c2476-sT)@$"<0>CU.'#AGt;7l$,b7!Q@V2<D`Ce<u/7T^X"g-@fA%o6YN:ou2q)#^bhs79agLWD_]cRX?!5esW5pUPr@)A<eq52t15"Sg7dk7=leRX/roooOV6tBeqUS'cjCIVW-Ac:W;ap_Hf'O$'m7h%j)H?[jG.s'Q.=L&APV:rijObenq(qG2Kd,3+-:n:XU[&kpEV6kiC[J5AMIeaSLJo]knh!BgidZL^WR:=lQWZAh_(I/`rTF>r5F;Y%<<,;n/qQ8)Ldn/&j?ZK+&da3S%BVY.%,&rGO8o(=K*4?.E?gcjZhM5m<lCM7VY+`R7V:_&_l;/Z<^QUTS+%:)rbE,0_[V_9eqNCS%+-EIC+acaGr*;:26MMJ_Np)Z>X:#mc47%/5@+d17H$DT#AZe,(/j#!L[oid%%ocoX3c0l]H??-*'fC%+h$]NX.0n#G17pl]I!IAo%C-X.JNqn,0dL85r1NB:Yq6D#.KZrRYE\TOLK\].d-UL2seI\('"<VE/QQne\'M)W;U5qXJ3$Lo.BC['HWtKt.Jb)K%K"L[DEpq44%O9#*ubcmh2\N:"O^g']e#PEkp;jIR9N`>!?,VQG6MK"@<(ac[BI9D:1lW!IC+9K-/rDSC\fPcO$=Bf:$DtXBY)(TEQE6(9]!$KOG%UQ[/4K9-.R.EMZu(S_W%E$'phE-JG%F6YTpWa^t^/<!9?G7"g^o/hb,R>TJu@']'LE'"J!\!CjBSL3[%+AUNBDRTrYUE&7dYZWr&%&/#uD+M7oEe":lngTaLC+?F^X.>X1T$3:]?$7L';#gr]%"j+Qc0*ad_+QuHa]J^T%@Tq4+k7mbu/c7OBmNY2B9%qU&LrZl7jYNWR%9NFk!SeLqTk8!O>E>%^rbTK$/m=?BTSVB]$R&n>&K/s8Cb[YZEr;+iB#i%V@>mq5/GgJ)E5fpEo@$-FHJoVrnK?PN<V_T"K<T8ft%Mla<)PS*'_.k[7D&hGe,)!+C.%X8or!n5)B8S@X%oO;)"GlGsJD'];h6J.WA7:U-lUc_b`6"=EiU"Y47)l4949P"(/)<4tY(C(]S%]@qrTKB:N?n-a*,ifKNF`?k`,peNdL%443]T3n&g%S^g>X'"^Mf62NUM.%nhie(AgR^+=X4b1&*H'Ga\q+#>m4#O=i5OaOPN,FFK%"%)XqF*0_0*]u0V:#P)[l(Z))\jY?tB^5*u4Q6UH-sFP:+.$\dJj1d;F0\&tcltY.Bj.gsZ8.NH:4@@@S[p<aEUpGkpR&-4>MP6^%"/!8#QQD\eE1RC&d$).0)?7g1mCe"2Ca,pJF7IpLoS!kKS8utRShO.t1CE*N$5:qUeXCVN*3I-g;88:4dQ%#R=;mffOR7>^SKS$<%^2noq5R@H>n/1E%gr*I*Rl)4i"eLmNYJ)#5537$=[;`+[%naom$B.G7G5Wj[Ji=:j:mo0PdK4>nG4hiYq`W&W5c.TmZG1!/MZ's[%B]2Z;.dQ<*nZPLAAmS2+ai8p*pjLrYXnf.3[.Uk`j.iU<UXsfJLftVi:Qm[/1G)V$PB;,/,0W%Co-O7snp_pc<GN0W`FK<?-]OoM%;b.Y7f@fSTYhb8:jtp):/UeRG-<EcW/ebn08usrFMp0QFo*4c;;LYp)hp$+XS`\A(]AKE6HM*H&B&5JnmkM\Cm5Ho/<r8k!J%&.5%BmV-<?*tX\Gu7$c1RK`*_GcXuGg<625./Y8+\!Xsk%sGpeq6Q?FY4^T3-EJgWW/^*\ejmf*N(41;]ec80mWao2BE?kFs[U[9\ur1%c]F@<5Fm_a!5%P.[Jt8-]S$N>j:UcO]Y!1kqO/"]5p[4T[O6j<k_HO^N^).sqWX4*<W4*4J99Pc8FmW<@PnhP,.gs!nX2Z'k2!61%Fp4(oqq?.Ca&97%7?2K!63E?NMMLJNo_12qpYXM&.;l=4l9LO(L_AblTMCk_9ep(^U[=Zcb.'TAA38\VX2N8'rfERsoN&a4mh@;L%iK]ndUo#$a)#,4]c/`e-4/lk.erK6VA;7OE+4r+>R<`b#>QN"9,po\)r1CJJ'T*%,6$#!s$,QZ:??WZk]"FVn-4@07FCXkfmn'gn%kV%#C_4WjaB:E&tG4WOZCQ=j3ak-1`I2J?J\*OXLDTUK57,-@WD-)3:ljqS6o_^l7q9CQZDgnGLg=qkZ/Fp.D:H.tFpmb$hQT8.@%/Uc%9'pA#SS.WJ.kGi`W#26WD0RP6>0T&)@Mj5#K1tUu#rmR#]\#Rl)&LN(]Z+/ZX%i/7G2f>np$*VHcn\!`//Y92%@(qcHlt5*4%--$2"?"RO"=F$8//nBlH0<%51/bN<QXIU51,_1&7;H^#]^a\ckYZ?1(WI7"A,/N$G>ib1HTDj/H`1M0(;5pEC/$o+BXZks\'C<G1%X3^VI8(rBd<Zgqcd<=EGeX,@D&%;@)XZi2snTNfgeHapDB:udT\rqW1fOfa?h`b[&=:@G?`):lZX[b>7*bt'Q\+M*6iR\!I>L-=/%*FeCH\+P\S4j;VQD7sm,-nRX^o51$)7j67Eo4JdJ3"-Bd^E1`dGKb=<p[>,`Hk`;0%<6#TfY\97CN_pqOik]Jl[+j$:1e3W\$+Fs%E2,'*c`khb*X0A0]shg5d8PZm)t?S;Nl@-k<=8u5"XeZFJ\:JL):+'G1u>@(gI=Kl+P`#K.AjfBW)eQF*ZXO'_-kQdHqZYI:GCtT%T@kf:DP%o=Lk$L_7='g)h&b\'1dpjjm%E;6*uJS;?#h+%;Y71tK;2Wm\':92$7@'cS#9nX.jEGtr'hc+MI(ITq1OZM7B233]0?M/%@s*V2i&S(!j_U>aWEtdnVTG8EqBDQBN4Wh7jQ2pRI:e4@75Au6lVoY65JL?hePnS?,?16_*5(FKJ;i&Wb_XochYM\S&7'![bo1iL%4EDHWCR8jUDS;(d]o$l,`;QUg.g7Yff@nM$^PQ'VD'G^_9CWeW47s`N66rkA1'<'[EI?UJZ'0\d>Sk?!N<6:AcIYA:h<lWtPsliS%/@a%[0Akp0D%PgGDd[e`.i@TSIEb;F@J@Ko.">DaQ.>fVM6&AX_5l55r.X%BCMI\CJ]J_]^,%KJqau3:9Pp05]dnf-/('ZDaa-pD%.IbNETHtochGIiUn1Ke&k(<(7'4Dj[eK[C.p*>a8s"Pb9!XV]EiK\9?1:qWh)nA'CN25UDpRDjXh*"HVD-V/p.S%HR)'^$S#t>_]%Wdui(!*A+=)aBAf_;/+i+V2HXW@E_Mh\0upPnGHr^c1TCM)As>%1r:cngQPWGCm7cP,W%/UKe,+YH4A]Mh@gP:UVcJJYcNY`=<+B%\N3a.<8&fob33S>\n`/`Na`V4mogh<S&<Q48A@l()5"uLQ0D$M!6iDALo!P4P_oOfq_49mG8r'YS-pHq_IKo"3SX,Ho1i5;/Woo[%8C%/mgFFL2VKn,tH^NAM4=1:fOL*#ZI,5jd)2.*+itC7>*l/ss*c!BO-Ve0RW-(eb"/`?83"cIfa5/I&oq[T$HjUuI[efc!N'k(T%Y'!,J=c3pK_=&g4i;9[s-Se\G]$]XG`Zf3#7X)+#>]E=8r9fTQa=B/*h;5\=<(>&9G@IdNKX&QGMYC>LoMt'hrlHEZCq%Y3G9XJT%GNh5+bfZjBfiYi$BCsTm.,]]=fI;Kl0Gb"PEK'6rA)t!5a3\/l7A"Nu<h/N2!*<,A+H:D1AH4-FBsMc?'#H[-0?SH>MK9<H_(PDg%CF-Iq,uGD//D#p"-XgPm/eI`6.Ki.be9k"NC#?d7_2#I^O3KNBb61Ec\Ca1Gq&4t5n;@gP=4/^KbTH;EUZ:R'HOgp:m[S*$="/E_%=od;o"*h6E66M&TKR`j^cNXL&Iofo0'c`Iub3Ru+K(jL9?+@%gVc^:l'sd3cK9g#7*n.Z?C)4MlMnT8.a3kAMq,\kqE4l#+'B#:[%kC?YZ7/I"mgLrWN]>")9O$gldZC5%2i@cF?,#mjFfjYVD]uG`OFo$CWqA-8Q\)\<)"Yf$Nh%q_C&<Qk731+'DM`Oc^JA4k&VMV8$%]>&migRGuNZ$Z+YObhE1FYXX[>F@>*m)(SS<\kt&bkKeM.o*]8WM$$5a([a8B-R0d%qUJ;<t4TD$rALc-oc]tZ#"*jV[HjCq*A7p%O<0B+?hm+f=d5GBDsubi*M<45H4>YOR`gl[:u_4"f:ajmNRr!m*V1PW%m(S/;aB`u'8rc\ZS.jca`=GL9mLVoU6rSAO17iL<om,2%VsekK8lYK".N_+iDOX<#&J-pYG9scYL>_BTmF(f!q5PdqQ4)>B1'20Jp6JLOfpEV$n2%j+7h.F90!7KT0"pW66c/E5mP(I,Z0-u`%0:6\+fQrtGoFlGuKhkJ=YAUWV8tS`WVKjY[XP>]Wq[\!P@lGNA"\VsDj0pWNjeA6h^"#Y1Q_I:.glk\ePmA4\4.T0)pD$T@1qUF;%HuefLF"g*HY`qu1p2)"bWK"6eET8A"ol[Fb@=(6(QcOU,S%$L.\+@l4"\,B2lpkYqgLaljSX14$-Q>ZYdt'I9:`@R!m><>Qs.?e-%1^2UcCM+H3nYVo"C5%u*_03:S*J3\.?o2#N3e%?L'5;(X6bn2u^S-IOUr$^n(kb,*W3t,4fl:@TkqJG>->VA&>]2E^hKH20FOkrc%;:O*?/Cj/Ek,=^4gP3F$AijBf[%TE@EhJuA2IP/q&`tA:\+-qAB6*D?K+.ZX2W=2>IN&.u1>=>$VeZ#VCSlol3UHf/raC-2s"s_j%*tRl$#FbWM#L&7kO"\B*7po[t+Y)CZ&sV'FP5pZ@b]@Hl]L9OWJ[U)qL]g*-&/k%.BEGSp]`C1X2udFrOd%dEJZ8N6IeZ4Wd*(l(%_gmt9'_0V#TM3hQ[fm&PQOZk)F%L$Q&eV<36I=(Kdf>%2;i5Dm,3YjPP&$hE!6-)eH:-WsD$Fh7@0de08XT":ks-)7OFGst#f8Pa%'-/1qUHf[*d=AZnp=!?*#a3Pdjq\70/SI+.)$l\[-IbLS+tQoK5R:0lL;R=1@-k?7'(gf"g)KRGU1jg_H6a@B5mml!0N9_K[.I$X%.LbAc7@esN'Le];J/B"*@R^FUE%i7c#Jtq.cqfAreNc(qb<Q<+(G&7A7[+A_>'(UV5^V`\,Q]V%cjP:,HC,1.$fMQiK0c17@)8!q%_AlaX%:I#u&<MT_K@ND-!MCGN&\%Q:[ijTTD=bY%Bi.*E"HX$hBU3(F,iWIf01^h3gd7/9'(A/E*!X^)1Co7Lr;m,\-"mp"96uFK%5lrF.onlS>&1.c9B7s\O$I(..*!!?^Rf"<9<YmJ<9mB50$.pK*7ScHI8/d)9S&-<k=;V\`<Xi.h,&%Dc7hVU7=qIKa-3J]g;[=-k%..dS`HR$=%U'?u$/U@_h++=C2[&=Kd&08T8?j$h6*/m-U!/ho&$5l=/$:`r$YT3;PCDSl21?]mg"@GFr&7[ad0q@P?!j</#@ZZNk%TG1l"63knbTF#9U'S)LBQNHE+(6GqS+-Zm>&Le)!$lWg<#F^:j!0%Q\A(cfcW<e4J$r\E:K'mG&QjO!07>F4d!3@7!!0ABq=bK57%5XW?`!FH$WD%s@23+?oF!H/7r6"gX'5qa*$!k9Nf!QitmE,!c4<+!WZJAq"&]bLN6K``Koq>p[C-QoDi&73`Nbk_Eqk\sYf=&O:P%"AkXHZ'H`L;uloS^d!F*-7M0WTh4j6DQed$SqE\kK''gB89W*//:/L5U@h%OU8AJQ)K%l^4i;,)3#KJK5sMRVgD6T!VMtj:b!FMf%"?+-jA(3BCq2ouW[Kp>(,ZUKP5[dN+)sEOeD?GI`F)A/B9UhYO5Zl5Tbe$,AY$V<V!&`0?!7U!6<$F#U&5jpl9`_=M,(@09<#B^(%C;F^(!$2K%Yc>WY'F#*7#UY.W70C^hD+JP:-HWkC,!`L5Js;mE$O3!_K7]p+UfV!M+;Sc4`@)B,qS<PURic'og/q>_9dJ^2e.`1O%Cc<!N,m0/Sq)3_UB%hk90\](D@:n/"-pk90YcQhB6lQoTJ=d\]Wun2JRb0>3,:T0Q#R$5lfgpbs(P*mJQ6:^cAf)D+MT.4ndU7;j%Ue?6T?so'$J=7=V_'Xq($lm&9aL"?%$s,n`=`SGC$l=KM18"p\XXiBq9Qb$BLkri[4cCTS):Q^rO+^X_V.c070tPS..(!BLl,aLU%[BWH!4\59HM7AdD>pQ-eTSTQQ:o&XR80/3A36)q#'#k>M+KL$,MqZ6+DLrEO_DX\5RV=!<eeS8]Qu8V%+/=Gm#VZ@6a@M+uHa$I'%!0'Yh*KZ'm-tF/D_R>0f]1>MK.%1kqcp0mo?]Y@[,EDqX"7Lc(8sh.@(TArM_@g$;\&.um<="/"-u'$>+omMn9[^?\-0n!0%MlO,%-l?%Z?A)]g=je&lEnL8oZJaHhIX\X,?p=oH_S;"f+`?lV..1C-l#:LLKgJ"#99<\g"]`gaU-["MGQB!S$EX<t.3]e=.,b0W%.Jk@%i7gf()5%Gg5@.0",Oi93)_a;,&">fmO((Kp[:(Y;g'BaV[aCK,TT&r%/A)NJ#1F@K)+;9$+;f80+hsKe!])CVNPQGK4i"c<ll!WV%r\-eTOd2`pH-q)r&jkGQL]ge@,tJRb#c8%f/CQ&h-s[Cd!#`U)i$ASH$fu$Y$B[kQTnOVG&FKXl@?;4]+BHhlbr/s9B;j-)3G>1M%4^k3SOsD8[+ZdP=O8s9c$69a"RN9fu,2%/dngYDdO=%od82SCa(gD!!6m?;RW!USeN+i?;'"8I(5_*XFJkSC\Up-2Dg;'LL)u-8g%0X^sp#UJ`G%D3n/X$@Mt70CW(7$o;X5p.+]"988u20O.)QL.dTIY)s&]I=/K)D2!DQQS-u;Fka-Jie(=*3*4R<hZN;>OhF^)e43]%]d'h6,9:@6#i!PGbF\`T\ccW9!c/N%D<]jdAcUERl)G$iXV1PG'C6.4Du5&$hJa]Gl*a.d7ii_[%i&s")+sD:4\QGgF'c]KC2JOP%3eJe\A5Qe&)UY_;bN%udaRStV&!'t!&(4JhW0nWV282%P2sggMYf,.r.7UA>I:-,5X3"%_@hSLN9"&R8r!5l70fertqUT],Rq\L4%@5G%LHadc]b\ib;[-J1;AUjXVd.s%L8=Lf%HOlo)2?e7-ID/*m!/C5F>AWhhF:L0aaJ$4g<(ZK"l*8K*fm]"iAs=ori4[P5,i:FO%F"smUceG6"SYtWcA788QeGM92J[ncumIYch/WZ+F2Ub39e%/P[[J%63Get(uC"&HoGHIFd"Q`n>@CC?jB:(VrT6!SZ^!&M.-<=26%nZ0LVb,0`B2-Pb:DOGj8(iuEh\H-@s<ZI*A@0?Q<;R/#mK*QJ0H-PQbPq3sFR,ZumqZP4`QsN25ZK/U%c@.t(Rj%/*Y\mbJ<oL'K%;GL(sBJ2Q[.3As]%;_>W393Xs#[9$q3b,["&%8e#$mWPMI??!APPZXWi,(#^I7pYaHKk,*Z?G>!Y&<;k=>93GOU4[e^9lTimdL^R%FQ%:YAB`]sctSWNrB44<o?FW<Zdd9Z2^83+800efoaC0s[[/mY7mo_s*9RE?o&RKgQT-!Zm#ZL3@,+hPXP/s*I,q#3"I@IRYLG@p%a"p=^hDBTV[kln*]@Z+k;/KHEl&b*,MYf9RKQk^o2+[!;$n^P[hL:#E])ad8`Pr[*NNr5cUC37f6*g7!LB;@h@0MK4,;C5jNW+%(%$HB[<OgZIpq:Ef[rOLgO?B\QP3Sc?n\=0<t2@']KIQ_Zl%jj\DlQGY'5%@oU[c3.\r74S'kS(B`@$*bV@7fudp5]:f'(!1Q8RI(L%j92^0i@`QM:,CBSTW=+G$-T`j@[liSN>KJId1k;gp=dp'@Wm*`:1#dW:$'OF=1dib1ts6bBtH*]<fhh)6YER^("kXT:YuhOg2O+f%#cMB7^^r0R^f[p2[oIJa-?C_Z8o-GJ(8p&Ro^C\/?cCCHo,F%:!P;EF5HiQIWu?&(qgbN(/%ru-q10j,OAq=.&,\PTfET<,ba7^K%6Ji=&BGEF,,c]pXU"')5Qmr&"f1sQ_'smPIZ(A,potcr-,q]S2&?#tkqQ$6@`u,$'X%+[;+cqojaWh*`/^NW>7Qg-CYU5GGcb"L]%UM)t/B$rZCZA3rfbMAep+B25M5.'oFHXP4^`S<5+=?@M+TL<WFYAplsFEh6`YI>kl%+\=g]3ZO2jfpuX\+eXNau6cgS-VELR8c-K%=K'3u0%[!kR.)fiOq-T_cj?#`Me/l%F<)rT:>'3G#R4?b`sh(dZAsaBO3G9/aL&]YG,s#fOX@EhF.7S_mXEUA&=0J2(0[/5HuGuW%,I%j5/0J/I$DtCgb[bNqop-2_UDk/AkT;O45D.4HDbM8F4>UL]):>_mkI]Qd`bO\;=?GTSo9NH/-@l>kIsu:=\%lJ;%'5/rE2*/T%^%\>B_<N\HpenucIXspL[_/jA#ru(*)@:X-.'h]?N+sp57VW5t.ag7uPLi'H@nKdmBZRHpASTR__b\ILon&m(BY.YE(NS'rfZBSF%#i41?m[$S*IeN='e:kU7!fM4]-\Tb;:^,bnf<QPEFPXrXET=EY+Hd&94%BW4#N\9R$%B?<fp"+g6N(:B#&BpLo$GU<DJXgp>MINu%Ir1OjN9!bQ7q50oJV+9lI'gR[.Ko->4E^AWf+Ka!8i:[Khf93TD0i"`p#Jr^W[rK99*gkRi/BXf8e)T]9/cNR"=n#7c)o4VckoWU%5ct^m%;QUnh^7I3fOPm#]%94t1rp"c&Lt&X=8G$/[)KG4<Dt=h`)ef`5)<gF^Lp_)=pZa6h>5^:_-#MiTuW+81E@c=*mpn"Eiq./%e7<b0"NT0p"aVu#1\fZr.k=/R!gr=h_Q[^(=N3lHZca'2Y5[L)q5/VCoH\7gB3p_6O@E-SB8/52DA?([:udK?Oa[gmob"",lj<%?%mEr+:aG)CNQE\dYd+`1]>35!_eM3)\;&4fdTh=]10I'ZA$,*20^uQ@J`bBgI=Im:F.mmAr(!r=V>li]P;V8JgdFd1W?2:q+@:=5`%FmPUL.eDU/ruMrf4cF!3V=jIT+(&Ko6Icf,Yj@0%VQ80f>9?/>BQPeg16[8\C9Uc^HEqm)fHN<uH,VPekne8u,Z=$2CNpX\8dkBa%/9OD0gm$`NGngZdUn"N/m&O9/!SsnN^UF&+_WG^"A2=sW>j\W283*,mhu]3SC>uSW+4adn--\69\Ea#"*cKN5*8#,5<X=9Q<r!/C%L"E#SMIB:U?rNld'jK$QYU78E0nhT;a_V:7/qd!(?Ht@6)Bs9'#E=f"KCm:GIjC_'=N:<:DVBTWYjN0K@)M+r[[uE.esSk.rH'hU%*Ys*UaKE(9[Ztt[S.m,+0VdNjC1-k]ga_m7[#/e:^eVL&"1sR(.A>2MkV(IYaDm`%*I738Z\2nZUn6>;<DQud[)/usmUtH'hq0g,%EOocL)R(fF*krL\2>']2iT!Pu)_u3=]nEKZE-mlLqA*:0KP+u<\B![<,HsP]9W0l?ls7!7%a^71D`7=H`gRA_,=.PZ'V09VO[0Tl%55+%Pp-b<#C`'Z(jh7;)m6Ipr;A)n^])rk`fp?t9@p<1fa-W4$Lj8"JrsKXCT\9I!@0pZ"EQBJ\1%9^]::%mD'\:=pjiYB]bS3$F%%-OFZT'Gk7U@&=,mJ(!\*aZ.ql=`i#:3726>pk2'Z"GcD-&er2oOb%MDT+%:QHrr^qeTpfZMkT7aZo<Sf\@>"^8[UW2&FX\9hjup%JRP9L]c`T%SEP**o2@/%.Nl0)M2.rBrC4FlW?SCH:b)"P2cTE,"A,X0$XLddU*WgLbHgYe@rgsQ.eW9[DG3`96t">F["Fj"PqXZI%B8.dOCiArl0Z"6O`Mk#NLfXc7dU%q'$9gkcS(Ho*S]p^qLum0)$aA.JQ0/`MNuq^Rp&(2KS3..mj.QXV.(<"G1g6n;,&D'(^K)+e%@jF5ua>HRX6h.&u/n/+/A"ttm]uas8*3:;ob155d"/CuVZ&6uj4r,u1=/+C7i<MEfA76sfdC"a2pO9o^E9P%,oE<37[h:KV,=kNE%'Qdd:<[+c]pPiJPm!uq15I?>-fU.Nmk.LJ&X4aP5pVNT*_X)aLJ=1t=@F,hAittOR,=1@=KN(6WCTKoHo!."+!f61Vk3,mq@@>]'%n)6R@#j@EEG,[rQ#4O$Y#s%jAH?lMp8F"U+=C+OfkmQ`+\Xt9[4E#sRO\.,YpK,SB/Mjf>lb'YWf"t<,_+Pe=G<C!)+1rJmqV9mh%=-u4Eg@<f)PpoXmA-VB%_X^A*PK4)sAdusk"gr0IN>eshe#H\lj($ukhT*ZLCe6"HWCV>aI>up&5%B&N+B5/Dp-<`F:lE@]UqrK"%2B_si)12imZf3pu8<L]C3a2/EY:bD4P-`"s2\3ql"1">?&L-ta7S_-QdD1&gL!<8NCgj8HC,`e]"%=N/&usRig'W"oSdM\%lFktY%E=<5mok7$MUO&]co"c:o]ZcR%St]-4fCi_!%ZNg-P_+S7Yi;L0_eqLi%L1Z"Ai_Ec+p_q<lrmeSe!50?qi-kS2ej8YGAAel;dZdB%YZf@XZ48!.IbbR$2*j5(4>Gf@Znd%pQsE?+Xa-[RNZM)R_L5Sq/8p7fCo$%;\jK-?DT5V;5`@PkdG4(H]LR<i/""c%XHhR\g#6,c%[G+'-8oZENAdWmEfTV"0-lHh]Amk)(g8qIo@YY7SD.UI@N>A+6<:dQ;FMH/QSqhH""X[658E.$pcga3rH[3dJEr23<g%YE:^T=X=%ia705YQ)ShPFXq!?m:egra?4H`gE!hrQ0kV2.)T+3&%F,_QndnKH3Oi:=&7gfY(t32UBH]F"@X9EV`aX7#-Kr<WePfh*SX<42OT#%n[eS$&\\8t^BJF`qrgiE8B#hka!Hetr;lU3)c;I9BG6k`0]g@fQ=4&<;`s#_@n@V]A$VI.,!noKPu9HfOTXWp]_j)IW-DfRJ.%I?%=QZXsC4o.Z)<%-21Y1>t/fbWK)4oAYS6JfQEl[2Hb8bsR.?><?:(Cd/T?4JT6:G0m4O]04<4ooY`4R2(NY'Tp9OuUsr]TGI?fssU%d_e$4KHj^cH.jk&'I?ni@3dAER,DNaM=,#Am0&ZRT9qUM%,"*[?R=br]LUklO2Vos$VU'&Up*kGY%@(^jC"#r&_1"S4N<IBqY@3T%i]2>EI'!1sd6ETOm%#UTn[gK#SYU"D78jJUBH_M!)UM-hS0U"+4@r2T9%qj8XD?>r;Hsf9D;EjU'_;\Z*Dop?Ums1+2s_!/'aks9%l/H?VB071EbYVO=j4p:gVdnN8e4/l:>",4k?=XOD=Du!lg1-)F"D4]r0FLq3Sg1_6M1^'`0lPC(S"VkqSbrBJ+^'?G;%A?A.h&2p%S$@7,S]EqRG,_Y@XA91U#od*HS`1Hf':0P2,+>/tIK3(q'_?+ZBXiZ>'5$i[^#&mb8A6.".p!5;\W7A,+0jX"kV$r_q"""pTnH))%"1+5BEF;!BTP>EU5:Cko$b;]`p!K&pTPfo#2^['Y>>6"SgM\p0FNqAaNTP,ek5k6R@ZOjW$Aq"3MEQ:).@;R?aGL4sl+[,UZojm)%Z2"t9;t6WB==s]<1*O`</NU0<eJ+=s\R^(f1RVC+[FFSa%pSIB,eg_#S4VdE=j[AYmj)ab??-PB;E,+&[XB6mICS*W+0fl<*I^R*%=3B\DoholJSj[*lbd3ZA0_;[n#:gAFETDZbL*3V:XLc^4DQFOF;:!lA-R7cNaIO7XP*+hY+l]9Rj4RG+LlW="gFNm!A[$jYqF#b#%]cM!S'fu5Te(4h5&bHoT?LKhMXHTCh^)<-m!B,"YG)?jXGU&ipk1e>_DTj$)idDLNUis3Z\tp//meM";9u%t!/Y:q8EiBGirQJht%ZpK_92eEp<obGCo9e4)Q^M1T.,m&p>DDD2I:-.0rT<f)SDaEY("eo@nE=`hGXt>YE?<`q14`+eHWl(5nmUrg%\.*fsOu:Nno0aQ$%9?#5tap*/UCcsqRO5n\T/XW7H]7Kol0>iiP9MR>S\L0Z90j-hHSe6aa'W1u?ojC;U>as-@PsZW"rP<iipE!sg4V7IDqsQdgJn@dg%<=5KSfUCWWN6l2Y@"7F/`nN!Z!Qe-i*LHDMV;+:$?1os\3<H15`DgA<#91d\!PPm%)!kG4+&(YT+#(F]NP,MHqknUt<I)D#cs*B(%4%Lr)KSV5%_])0b,-(5$MkS<+BUe;[f5@m!$:-:B<#h^jrS"YAKdL"NLtn8QYT$&X*J'GUU0m@bd.`(QH=1[+^nTYPiu-T4JN5.K%Kr%GP!-8L(iZt@,$^93;&N_GC[1r.gV1.dc7QSkWpaBrN_%CiZ$tm%6=E?d>FBn!$d4V.XT:QT;Zi+LC?qSTDRslhQ69.NQJIS7T%64K"+$Y51,mP_'hSA?[K8g1.#h*Da)6'Q,8V>rT;'hpU_.$bP0-YJmW;d.Y,i<?35SI#A>rME_aH,=@#HIfk4XGZ;N)OZH>7Q)Q]%[eB<PS:e^8f3&6+Egk7G=%iCn7_A6e)G8W2;shI6k."h^D"gUa$E^T!Ho8I4KPc9*]8Ciql?0g18BK=@_B1L$RNLn`"6O9+Yd>Um%qW\<sn@K!Y1:@pKbBLJ)O:u.4M7-e7^RoZQ.A1R#SXnSGTFmZhgOAfX[^93L"^qc&oU9AkpQ#788X>/uNa;W%H]+6de>gK&[<;;_%mC/1j]hK/I@g,k5_=uL8+&%O??sV_m_XQ4d>Q*uji,_6P;sXXkb?65tOuo&;h?_S#c[:Y]bjr#E3fe-k*CpTq.6@d$Sk@q.-sGfQ%.f,tqLa%YM^bgGb6Cd5fP]X&aQFi-58o(@<&jcg);$rB\jcc(_Q2Cla?m"KEOSfEZfRFMc/ccE>@AIaVm7c>>`*J!1F"=ZA:<67D%pNL$J]j-r\Ipc3kL*XZr>,1OubqJ<*`mT6./]O!4:$Ej;gs9qW?-@7k#gr`P#"^tq3Bm;e<Al)G_Nh\8duK"@B]MrcHU)MQd-0Su%WZNr.3RO\>P'CLH=q$"h98M#%2A3`/0R3`8VG,+Xa@_[':d7:.5fVX+P!H)!RY3)OV:sQ3@/1#&.,@</Hj$CF*]&:sh@,5`$aXPH%R!/=c8`[e-Y@sc*a&b[e&RAC04poo4MV6$I\>4d</o0=T>4H9q\DC&BoX'n/'D>gonraq@AC&7J<S)N*;ek*YltPF%H?(/Ogfg;R%&PSd`Y;IB3UCt1M,sAeV\$/UoS<P!$e,p'YQk"jS&PT>)5%GN;lO$fB$SX#Q`\2d(V+""-R$Y,h$agbGAgksmj<7]\Eo8f(N4/&Q%h+0!C)TP]Zp?Dd(eYCugea7X`H+H''T4Znl(i8jBGf9?3[e,ga-qn^aN$-*ddZcA]f<R+/4M=^lV:mH*O?,Uj*gl!FTME]#0>dQ!%p@\kFg*tD^Cpk%Fbci9*(lpp5o[%>K=\.uNb`S7&g#ZTS@8#VEFj^Ch1FUrXU@[%kLNC3%98^7nJ>5G]I/PRs'd-@b!_@U?K'q0O%4$ZnG8Ea\;g)VSKa'P-PSLAWmc=:FJ%8j+Z-/E`5KiWj!En_>tG&d-kYEd0FT4-#kHA:LVYiI2s&$2+>Cd?,sU[O:O8siS;):9*&%)ohHS?!6mK:TmX61JX>@>I@o]"AoL;LY^$Vb**F7/=\/QX,U;CF=3EH%)UbnWeC8VI*rXYfhTCc)&LucLpL1J53<bdm%bP]hd;8#%BNG<sWJ3[aa0MTS0X0F!ZTV/f*=%es6Pu-a0IUtQoF(u`$fc?>f"c..*)T.tlRc&fRAbag7H*(2:8BFL\Xi72.]RZm*J<JP?ET:7%Au+HHm+ol!9_of=jVA5WjnXSC)3Z!2U"oflN9[M,$q_#bP3o?5[\g;%]mq5c(tL78%P1^JC'DM*/OXTb*OA@@*tW:J(J&oNBqXEm%m\e+aKID%/I8$k_2mtEfZbYE]@)I)DW]ufO#T*"C40FXU7&OqsR5>WagR>%2_RdNn;1As4)iG0fg)7@u%87i6^_Hbq-_qXIEIeC"%[hf-VS=lpCdnCZB;fMf-0J/2rXE$r*Lmm?UiX+:%$dGis'=8:=Cd8B>GnB*/Y9_ffaeo4dcc#3Z"Hblmqd;[R.Vt`;H/<!6-GH-'%.`QuMQmdHL:)tSPC#;k5fV=q6?;^%/f^3)\pAf6qJYra'c/Y=Xg*4bt@q!9MNU%J`8U+H3<`oZ*!#HK(UdlBP5[N2.?6UT4nQA:p%K>V5\]??T:K<Tes,o!DST<QeI[-'1P9lA]pq+&RBa:S4O+Zbic0,?:L)g"3!Q;UVFj9]:/'L.kWRY%P^%0_DK$:;7,Q$<a-2U;c*%^^(BK%YAUU*Z$K3N:65=OKJP;:@X((chlB(2Y*i0,8T#X5:&a/i?E"@X\Cf$\$2PGIpmDo_m8HaCmXHK/DK_7=R1auS*DMB`UOo5%ZM.980@q0uSr^jtK`%NZ.]\&H`2<Fn7=(V46p@]qEJ+#XKLcBgRg6J8Opm;oXcC2;<^cRIF7i[%Mkru!`+138Zg=lNCp*7na<\:Q%K3E,P5[MV7Z62M[*D7<V+rJ-K^L=WiJ=OPHZXgPfS;0d0/N:*X>Ug/=i@Wb,K!",OhrlT6'3GQu50mqM-_En2*I\1>UR4\<m=rB+%?Gh[Q[L^l^TS%@)Eb!P`_29dH_Yi&4FI8p*Q6N9J2^Ukg7'rZRE4eN4btlU8b-)ZEo^i_nXWn@SU]<9AFsB/b`)]kp*0Eusf:j=G%0tfec"KIrd<\@G$:9CKb@ZdWTZTrG&Prht5`3*e81F76Fa<V:p;,:Rn`Vm/5aI(I>*e`:9Eb``23s`)G3)?@b4gg0i0k#S9C#a*[%[<68Am'1h)RS;BY6fiP&V6)$Iof2Jc1ab6LIO-uiJ-oM$Yr*L4V*;91)sH<hLGA0cMGk0*=Y\QQ)3'B=?9+3DIRC+1'foBte19sb%:4%mI;GnoM7#aP;7+A4T/?3\k>kV!+@#Aa-:&AbCfe8mW7KprkM5D*B>MD0^8d`IiPJbgWdmL:HEQWR1)@*6&Z76jo,;OdqnV2G-%;U?rT^$)MK@H%!RGs8NhD"r#7S85^%9,N:^jF&>-nus@\;L>W%,Y@QOm41!$1;nLNZ'.X8_aN0%)t[[#]tHV(jH]/t4YkBC3!BX;%j`QMtd43CcAe,85=WSsm1?R-bR+T;SGYK8%>Pn\4(/.>V&ChC9kO'7s*BG^8be,I]M'k$Er4Ng<6j3uI"*%"=-EW%_ERDI1FqQRQ%$F=ACBoY^GU.h9VA09t*IZ!AeP%)\VG+2Q;+.M(_Yrm?%JpDr>M(nbhp!eaG3!V?8kVSk>J7(P<p@;-AL%RJXF@MrI=(&^9eae>7%/.C7,F<B4.Rg!U#`!0?D"7'HN>s/g:pNHoh`A:L6+RJV]``G9l&33*R$MA8U-ZA].-+]ea/%HE=kN.,<[M<0"9htPeNVHX6G7GCK%Mmf4][pNOj%VtMH-AT^EOaWb&j1pNTnAqXo%[b>O(A@I_PfZ4<U><q1*pjWhlg6Bh+\9/plaV$(Von$9ZYOdQp?cZG,>t:P"Gn+j%PU:FcKW@VaTjNSf@Lh;R!UR^Z.ucCWCSYp7fcHED)4B8PfjZ5.'.bZC>['Z3TB1NG[W/l2[rMp3[KT\^HNC=617sSfc$lrgikO34%P?K'N5/'N-W5jW-[\B"J%5RKb[`8mWroDi;Zfq""s60RO1KNt$SDbZ]964="6(LA2_HX-!.:2h-^sAZ)T<M9:f\<aYpU-Q6BJ!XR%cNmh]VF(OgWqB5+6#LN'H.7C9:4`Ym;=u)0aA%IA$HM'#n<uk(M%AG9s7tuEq`PA,:CdBI5sO7u!s)lc`U^A@o(IZ;D&)&V2E1=D%BL$uI`ua%+#fXWFhk/pEMUN<t?EpI,nU`3XjWc[doar-[Srem:^UT2`-qpD4G_TSu&^Bi&Prn1S0L$aJ6NVTA+";@f4p@?.%:s*6%KqdLWfqRFu\;F1:4pSKCMOXTHs'$4Ts5-hme(9*G1;r!RT6UfY>nt,@V9^)""cE\Y=Afd9,!@(`ig$e>#t#N`bi9a9QRS-"F<5W.%hc.a"G3qehckE%k\WOq]*nZlZ%.oq\a*7FSjaX3Kn$kNa.(8AhCKHWXf\ePXXAjReHNp'JqSp*0-MKciY#ZQpqf+RS[h^-9C6^"#%k:tDE4MCHJ`MCdEO*Q5$]5LR-R-M`?G'J[4HN2>qaFS>@<)T;?CiNs2.JE/pCDpoi/H+tZ'1NjA-9&ogpg*aNTEt62l%-@2r?#eq%cPdhA*r1IXd`gM`/1Nd^$@D"VDuM9RI`q3Srcf>]2Fam6!etTO&Vd&CD[]#X'd`9Gf@RNpW9a?Jb6t0s(0['Qr"ZSl:X9F0g[i&Z%Hi(ce^Us:5LI;K`Ip1$h'pMd$>k3q/Br^GF)U36G'9F\Y=N>m5jp=8eCt41m/)*`2^?;<EMFO%;<;5+K'V;7doNQ6<H^ElqRblSO%oXVqpT3lVBESs2Th5<4lNC#\8jKTYt$fWjRWme5l`a$k@0Wa`VU!T[mMX$3OF&+r<`.4pMNcNi)le]8(]HSs/Nst#m<oUDYKREWi%YpafVP5Q9p+WjXMMGk`@dOIb(Y#-/\T4QT*,55deqX_nmW11Pr/iTR8d`=>@8d^eFe<G0XF>Nl3=+0%;@f.L#2m-10,tI+[S.Qtp%+dE`QT"%"E`gX%qk;r"+8h.8/\H]\J8Tu\@"\VAaF-ZYO.Ytg(+KE5X:*Ha:9,eYPI2:f-&9:IrV2!XD]Iofp-8"C>Lsg8Mat^H$%DC',J':5]rrhWFKEXV\I5BZr!7\k5hT;Ad;\o!$c1jMJ@3*mgSY&+2JGH70"=*a0rHHd$FbED4S@&6tpGFO_2'?Ve9YMAR,+BZXL%.s/7hdlrtBT"5nn&oi1cP59((U'_=$;t2-OY^3Da?8]/q`IUMV2H:6_Ei*Htia)joj`_rg"RK0WqY7?g,qc^[#<CD7FN73dGi,kO%1iL@3o7FJgF46*R;5-9JnPL]N9J^2Od%TK:&tpTX>9VtJ._37M.ZmrboJj#=fEAL.9k2j494$Y-or1tIB^Ab,K=`6,/TNJ%&ek#@%8:!^+IbGj5DF`[K&1I?VeVC<kh!T)1?^(2,L=M+dajE_Mm(-?agauEEpa?ccU[bjk:ls2p8630alD15>\dYHfQseD%'8:*K&h[mp%18?C$juSX<2V%-fI=JFdR)Y_bSBS"ZQ>M+Ce@3fZ!6GrVA>ZG+DgPZnR,jse<U@OrSFI:P:/o*:''B^j+,`6%=LK/V&^UpEYG+5%%_Lnku([f6*R`"5Z%#1"IQ#K/@<GHY<nh>&2m86ki_:^Q:_8WfF7,k.l7X1j*Yqe`E.:@oIRumD'm6IF@[bZ^]Q2Ys4;%tsUHJHT8%1;DU5;'O1\<kStf=D-f>Nl).>bWR_q_Z>ZkesoO#arhOdoZg=([\O>=lskE'-5MsH;Fj=2Jo[c(?HT0N3^ccO#nj/_-1TXn-s$a_%+oK'6-uMX[q5)QTThVDg>1lXW&=(<60DdG`_@-f_-?TDHDc2_*?=HE?PLjg^:R!C->)=Z?.X-1cP8arW@6JIS_/<#6n1n&SQ@!\4%J5+?1lB"L=OXHu9B!ih;$R>VI/?Tc#a5=($EC8e47=>-)@S9Wf]kGqV.&si(,N\E(L<@0hoI8pD[q_Uc-E&N7P,#@?j.7#c*e3Tq%"dN\L-O#3:n*[l+pRG6jWsuJJlj85h.I[p;-.R)%Wj]PZ.7bDHQX"tc(!($UC/_U#6),DP&me8gmj+[mIS?W?(39%b77\&g=,7Es%,&B\`ImZ*)I'LY.Ziq<ui^nF(RoOO@FGWg\d-1?$A;rp!P8kut2)oh))OR_+:;[O#jk>*,7AdhkN+tSl-s(6RDa'e@@X>ngd.tQU%TES]8d,Jo!?.u?[g&R$7\a2N=`@dJac*c1:]@Yp%`N0Et_k4*Ci*8G^)s@B6K?,W<\J>0FKHSl\MoM'#XVX@MV#\l"\6_@NN(Ihb%!mo5j;t1[4PW=pQd!L8Y4!nhFj@H@fYQ\\k#5qc36nVGQNnm<OCP]6NWh'b60\YSOD3eb.i!.sN+d9db*F7Hm[&G\%G]0%MO6[XS%XAlt-e]$)ua+@9[$*@\:5^#SVI<l*<!qd+diO@`6fdTOX_01RZcA:4o6o_>DOpB,$+tc`8=Sne&nutc1#m_lQ'\/AA=qtC"q^"jL%-?\\&L#E5(E[\&ej!'C2U9V3W.eS=j@Y&aBU@&U+Mk'V-Elim,FM+T\9t&pH[s*h%7*0`e(HJ'?IjQK6m<(dR`q(K7:+QAe5W,#h%jgjA#,kdQu*`#>@cduk(ka!a##iGAo_X`(KI2@oDCQ8WJ=*;%s5&YRYg1G0^3O?c4?-e=pS'T&(/'(_rTPkc?QQ2VmqbC[b-M\@?%8=<bRNLn+"\]h"1&%.M.%[Ns.pImpD+,JIbS8jU>VGVW4[e1E7hpr^Ma"A1jJC_+VPZZ;r3X\*Gk]\3#>)ECR?hHUJXKitT$C.bP%f.#pAcbU;?D\2+'B6EZU.(DI=,Z9ISllH)ckmQEk'>lpUG_O7Ja*H:a<)-+QpD()T#a;`Y;Q\ikT_9h=%M<(!s35D`mJt7i*6f\u%VE/l(cd1J3Hh^1sA!N@i>`2B%Sl4`39j?nX'r?go\09VO`Q<<:kGdc:X32tP?[WU;+i<APoNELu]o0%Mf'iRu\A-@*o=e:cc$N<)%B!Y!:2)#p0)$'eadg8IK_6[&GkZ;obAQCN/W:1Ou\Bthl#"*AifGHY**"hQrA,Em>\$Em_]J=(5JiK?6;%NWNk:-LE-B@YBY!:6\%<7h0-AQ0t#gD2i+5go@fERK0-mKL0&<Y0Dh"R&a3P\+A"]+33'.t_B`/i]dr-rm$T\oNH7W!%!L]gG4%V&q!'F3dgUZ.D"X=u.?`%9=0UDUHaEkKEdd3jg6;:4^'g5U0/V586G$/V3=i=F@FT+fR=u_1FnUom>%d`C#8LHM9H'Z,bbXj;Si8Q)e1+4NZ`DCm@rTBBMP>&%8u2+qH)OVH-[c\PTsup?8jB`MIpJ4kP#I650eF.Fk(PKa9ds!h3QG$=)MY29]r[_JIoKp8LS\"Fr3O*Y/h60811b99pZ-6f/(b0_%eP$b"'d_5F*#+\4Urc;7[F&O;KI(?p$CJU1O<'PcVWtb"C6Zn.el2*=KR%[N^!mUUXR(A%/OOYTTr2b(I1+fKihT2<n5@UY96Xq1%.q*<jV\"@PV1c>rk44W>Qs1].N<6%\J]e5Va"^t-ET[MuGqNqW<_8Djg^0o=Ak5(Z<0&iP4.r\A+\-U0:=3W^?1Pj+17K$+fd6/R%0qbn9@7Z`Nl%CGs*Aqe*JG8dk0'Th_&9g$A20#*85a;e-C8!0R6$tT@P@_Y2-n_$r=377,fq]?6//9;M+B,<nl+K%a)'KpYOo0Bi%SYUI%]0S\_/#9Im1(K[?247K%.P+u.$S#MtBno#;;6Fl6'Q,B_f+MCBU>*#PK&.2EOJK(\Wo:4_]dQt"EJs>@jVq_o+&<@uVOgFI%V61Kt;`(%sX2r[E`42mhc_ZLe(EF$8dROi\8`KK:#NHCL?5[Q;[Q//Q/:t*uLO$3ZgMAnm+'h>0,%)<IW?V=PW`1\feM#um6K.DT%Ti3o'j"a4NIPd<&Vc":NZ/&S8mS^A4\@8a70,.EW#t@\(PYXS(0V7V\]A11Lf/&^Jh^q5u'f%,<aF,SQTkehVVeR@ZZ_n/Od],^_%_Krcb)\5%IVhE#D/!.>H$kdQX>9.^/6\t;ri0?3jRV=&i8OZd_'LTVY2;n&26+\uk0,>/QQSE!5E;ieI[1'gX;,f8[I&t&"VU=+l%X/^.rhsLS4c5\hZJ*r29dQhUZ*.V74;ZHe9^[jlML.[q]M1r3a];oF5R$<N"qYOtN<LL.[`GmX_G?E:4$:1(=PJ*C*(=mk[&Z[#Z%9#9D@*<'>aZ6$>tZ/9]b2S?iRT3ulc*9F^\J=Lc6R7qb!ZE2MI(EIPk/kX#*Q7+Ag+SP*l;1r#V!;:!pD==#lUm$&F7oYY)$VT=(%2-e+(N@nT/VNOZO8Aa?O%Fs1>H!07I4OfZ[Zcn-7lADigmmiLLj:fB.`7/#*mEt8VY8s^-d!&ZU@5b2E?-\!4-M&kWY)L6QU;R\a%glZrBh\n=7/UPl2>TO7d3\_k(10RWf_h8:].F#+:&6VX,1;"#PRlXj.pjihi2klEtIQ!fA\pU5"aEbL>1b5SoNE2Nk'53kZGTl7>%99D1:'pgFoFB&Tos&)gV>PC8kT:2J^Qa:UN<b9*kaYkcDF=s2M[9I4<0-C.:fsHts/\]J8!]gNg-HY>,rcY=VR09NX<i*N"6@gVl%YX)rfUI_2\lVN*<K=gF(_.&>pNqe:NCSV#YTkkjdkl*uI'mCIPV+YWtcMLN<<=E:r`T2GY`K`eX_"s3uPe0CbpM0(U\/q*E@H8Po%I6DC!>8nc37lsDa9MGBYc@k9mfsY*B8t/>udG;cr'bNu3IjT\`\&,lCg,m9YHRK<*,RVtb@tVX[<GZ2U2.PFX&C!L<]r7gM@pNe:%+/9r-3bgHg9Sh0C(?@[A72[Fq=j=,Fs*8NS6\;V/&XE<l'I<%8S41(@7E.@SI=8V/n(&^$^N)-do%-nbS"2Rq!fbaUXB7lUi=8^<%l\:M\1.nPSYZjt#PL+"Z>&iDeYXVW%mSS(]Z'5U%FBe8ZQM&_VofbN-c,?BKrf@mT;DIF"0*u*tLR?YT\T$\:U4B:"(?1Lr&h)4g%8dPgNV+=_mh:%L-QE<rofkIXWl1)BQR>_djH^grX<iO/8i7Gu3'd!_M.EjhOL9,@A3Nh%Ze&'=C<no;ITiYl#dn7(on?&$1XCN`U%m":+`nh,XO)Rg?K_:YmRe^&$-'i\NT*mTT%\C%XcBpl.$=/A#Xbd'_iW(OA.LUO=rrKjX@>'W$8]kdV/,<H[O8n:7c5('%RNA,-t%l/"@)6P,V*Lau)O;p9qr3A0tIFFaN]m^qJUd=q(<o&A.>dBsa0kMkZ+oSXB!g7ia82lH!YDp@rJAW.eG:Pb%:geFok1_Q)FMHn]R%P*bf>..+kiit">;NdPtC[n&U+s.V#A]4MFo'jl$sFatcX<LN+FD:TQHe\cJZEjJm_k.jN.T[O0<8u8YVZ:ZhQl:OFS9tB*E>nU/e%!#s4(QBe3\F"HF>RW1_YI=cJ^JOGadU=YX"\,6/$S`Oli!DP&@.e!0U-GIXP/'?\0Tl@M$J]bl-@eX.0RUXs@p6?oDn$-0c]p$G3%rfH@*ck747Wott(HC@[H`G/Y$L`n91Q.7@kP/Z9(0(kG[UPbjVpMfr1lAGUZ'H#C5m%qdI$5CJf9ND8AX-*<Od4\70<Y=M,Dd?Z.%`(W"ciG(uB>gFmO4m\Y=funRG9[/N9\t$8AMS/^,Q5$G8@DJJ\jP4^m,++k,7'5W#^1%/YSeN1j2!;>TPbM'F@2H@i:a#lRJ^F3b%#C2[!CABY:Qm!h7W@#CqhPBn=(X8Fo%N/ifA5!VhbV/FNf"0!Pa(<Dc&"nrZ@O/+dbR\bU/1S2F.H7th-^_`[Mma0q!iJ^MNC[[o%Ro`<.Q#+!Y5&%tnRL6b#Q*W;f?8]Y7UCiIk@o+QrQNWs86:Fa2,51\AMWjHog9tB4/]s@K-$8pqJA-2gWk.s=ZI6Inj&]e+T[gU9%7A40'K2X0r)*/<3Yfg41K&XS(]rHs+o8RbH7[R>jDWo!5d@55OR:<5pe>&W@Wgs%D$BC6R4\MX59M:S-.qP&:'Ksql![T=Ce*<G2%QkZ\f7$Np80o5rlB1YNBd;u_e@IYgQWq$qE*&&V)\I+)0=Tp>>bjXql&.Bfi@Q'slOlDlpDjpE%^&H]dHL:`)qSa!F;f@iHF`<qI%4oKUjUKXe?,s,ol!?5n/G?7N?eSt.oo;OW%!A'>.HTN!KN]a-k'J+XQ%\,\a0[^aW;!"^H_MdpH\^VeR!cDiS1t/(+C"9R#o;a?S%rcl:Ver+t-7-%T]FB=GTLl1KhJOFn8"2jEa9;rVs1S:qucdYXmaMABkEh2#.&*Q.I]4>do7ju*3>B)fml@ZDH6bO#/7:I+iaP"TR%F(DLNO4,'YQUOYUE7>t*fMH-r3<Q:0](.R-)3]ebg+eA`rgoY];0&*G.QS)YS6!.3[E3-Q>.Ar@N%L[ai9q?peW?Zh`:\>;;oPFX%EX4UjJTdSTRff<R16P>g:<6#u'i]lY-`PTQ/j@+9,1CXO&WEUAI>?Yb,Ejs4j^DFc'hg-9hH]XG5nRY.eD50tBS:+me71fB.G\Lu%1@cEo>%D3123"E;Im<UP.f3C0W_'UH0SZQK)M>"Wr6mc"K:_KKJK-5,$<DX_4tZ&Y$rf>?]iu/+\nN^Ki^6!%N4OIHD+Aj:92U2p%XF[(.CjApd\kO_')R2`))FQO9ASB&N3Bng=[*d]%"Y#:11`8O'_k19W,(ap?L!Vb'9ou4@nQW"6UJIcA:9q'*H&>#f.Ig88,hW`U%Z^p+gOmQ#Riqo(s*2Ia[%R)JrcPMK7q!%2'Iegmrq=j9krV`AfqqH&X^]3EarpIrOrpV"Zqr@/FkqBgMj7hI2o&Yp^rU&e:?[qt%%TDnbthu<?Hs4VtuqT$AKrn"p`q(KL4rTc]Gq4BoqQdbjCJ,&p@nF+*h+$cL1:B~>%AI9_PrivateDataEnd